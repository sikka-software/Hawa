{"version":3,"file":"embla-carousel-auto-height.esm.js","sources":["../src/components/Options.ts","../src/components/AutoHeight.ts"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  destroyHeight: CSSStyleDeclaration['height']\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  destroyHeight: 'auto'\n}\n","import { defaultOptions, OptionsType } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\nimport { EmblaCarouselType, EmblaEventType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoHeight?: AutoHeightType\n  }\n}\n\nexport type AutoHeightType = CreatePluginType<{}, OptionsType>\n\nexport type AutoHeightOptionsType = AutoHeightType['options']\n\nfunction AutoHeight(userOptions: AutoHeightOptionsType = {}): AutoHeightType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let slideHeights: number[] = []\n  const heightEvents: EmblaEventType[] = ['select']\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, AutoHeight.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    const {\n      options: { axis },\n      slideRects\n    } = emblaApi.internalEngine()\n\n    if (axis === 'y') return\n\n    slideHeights = slideRects.map((slideRect) => slideRect.height)\n\n    heightEvents.forEach((evt) => emblaApi.on(evt, setContainerHeight))\n    setContainerHeight()\n  }\n\n  function destroy(): void {\n    heightEvents.forEach((evt) => emblaApi.off(evt, setContainerHeight))\n    setContainerHeight(undefined, 'destroy')\n  }\n\n  function highestInView(): number {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const selectedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    return selectedIndexes\n      .map((index) => slideHeights[index])\n      .reduce((a, b) => Math.max(a, b), 0)\n  }\n\n  function setContainerHeight(\n    _?: EmblaCarouselType,\n    evt?: EmblaEventType\n  ): void {\n    const height =\n      evt === 'destroy' ? options.destroyHeight : `${highestInView()}px`\n    emblaApi.containerNode().style.height = height\n  }\n\n  const self: AutoHeightType = {\n    name: 'autoHeight',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\nAutoHeight.globalOptions = <AutoHeightOptionsType | undefined>undefined\n\nexport default AutoHeight\n"],"names":["defaultOptions","active","breakpoints","destroyHeight","AutoHeight","userOptions","options","emblaApi","slideHeights","heightEvents","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","axis","slideRects","internalEngine","map","slideRect","height","forEach","evt","on","setContainerHeight","destroy","off","undefined","highestInView","slideRegistry","selectedIndexes","selectedScrollSnap","index","reduce","a","b","Math","max","_","containerNode","style","self","name"],"mappings":"AAMO,MAAMA,cAAc,GAAgB;AACzCC,EAAAA,MAAM,EAAE,IAAI;EACZC,WAAW,EAAE,EAAE;AACfC,EAAAA,aAAa,EAAE,MAAA;CAChB;;ACKD,SAASC,UAAUA,CAACC,WAAA,GAAqC,EAAE,EAAA;AACzD,EAAA,IAAIC,OAAoB,CAAA;AACxB,EAAA,IAAIC,QAA2B,CAAA;EAC/B,IAAIC,YAAY,GAAa,EAAE,CAAA;AAC/B,EAAA,MAAMC,YAAY,GAAqB,CAAC,QAAQ,CAAC,CAAA;AAEjD,EAAA,SAASC,IAAIA,CACXC,gBAAmC,EACnCC,cAAkC,EAAA;AAElCL,IAAAA,QAAQ,GAAGI,gBAAgB,CAAA;IAE3B,MAAM;MAAEE,YAAY;AAAEC,MAAAA,cAAAA;AAAgB,KAAA,GAAGF,cAAc,CAAA;IACvD,MAAMG,WAAW,GAAGF,YAAY,CAACb,cAAc,EAAEI,UAAU,CAACY,aAAa,CAAC,CAAA;AAC1E,IAAA,MAAMC,UAAU,GAAGJ,YAAY,CAACE,WAAW,EAAEV,WAAW,CAAC,CAAA;AACzDC,IAAAA,OAAO,GAAGQ,cAAc,CAACG,UAAU,CAAC,CAAA;IAEpC,MAAM;AACJX,MAAAA,OAAO,EAAE;AAAEY,QAAAA,IAAAA;OAAM;AACjBC,MAAAA,UAAAA;AAAU,KACX,GAAGZ,QAAQ,CAACa,cAAc,EAAE,CAAA;IAE7B,IAAIF,IAAI,KAAK,GAAG,EAAE,OAAA;IAElBV,YAAY,GAAGW,UAAU,CAACE,GAAG,CAAEC,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAC,CAAA;AAE9Dd,IAAAA,YAAY,CAACe,OAAO,CAAEC,GAAG,IAAKlB,QAAQ,CAACmB,EAAE,CAACD,GAAG,EAAEE,kBAAkB,CAAC,CAAC,CAAA;AACnEA,IAAAA,kBAAkB,EAAE,CAAA;AACtB,GAAA;EAEA,SAASC,OAAOA,GAAA;AACdnB,IAAAA,YAAY,CAACe,OAAO,CAAEC,GAAG,IAAKlB,QAAQ,CAACsB,GAAG,CAACJ,GAAG,EAAEE,kBAAkB,CAAC,CAAC,CAAA;AACpEA,IAAAA,kBAAkB,CAACG,SAAS,EAAE,SAAS,CAAC,CAAA;AAC1C,GAAA;EAEA,SAASC,aAAaA,GAAA;IACpB,MAAM;AAAEC,MAAAA,aAAAA;AAAe,KAAA,GAAGzB,QAAQ,CAACa,cAAc,EAAE,CAAA;IACnD,MAAMa,eAAe,GAAGD,aAAa,CAACzB,QAAQ,CAAC2B,kBAAkB,EAAE,CAAC,CAAA;AAEpE,IAAA,OAAOD,eAAe,CACnBZ,GAAG,CAAEc,KAAK,IAAK3B,YAAY,CAAC2B,KAAK,CAAC,CAAC,CACnCC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKC,IAAI,CAACC,GAAG,CAACH,CAAC,EAAEC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AACxC,GAAA;AAEA,EAAA,SAASX,kBAAkBA,CACzBc,CAAqB,EACrBhB,GAAoB,EAAA;AAEpB,IAAA,MAAMF,MAAM,GACVE,GAAG,KAAK,SAAS,GAAGnB,OAAO,CAACH,aAAa,MAAM4B,aAAa,GAAM,EAAA,CAAA,CAAA;IACpExB,QAAQ,CAACmC,aAAa,EAAE,CAACC,KAAK,CAACpB,MAAM,GAAGA,MAAM,CAAA;AAChD,GAAA;AAEA,EAAA,MAAMqB,IAAI,GAAmB;AAC3BC,IAAAA,IAAI,EAAE,YAAY;AAClBvC,IAAAA,OAAO,EAAED,WAAW;IACpBK,IAAI;AACJkB,IAAAA,OAAAA;GACD,CAAA;AACD,EAAA,OAAOgB,IAAI,CAAA;AACb,CAAA;AAEAxC,UAAU,CAACY,aAAa,GAAsCc,SAAS;;;;"}