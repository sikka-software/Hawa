const defaultOptions = {
  active: true,
  breakpoints: {},
  destroyHeight: 'auto'
};

function AutoHeight(userOptions = {}) {
  let options;
  let emblaApi;
  let slideHeights = [];
  const heightEvents = ['select'];
  function init(emblaApiInstance, optionsHandler) {
    emblaApi = emblaApiInstance;
    const {
      mergeOptions,
      optionsAtMedia
    } = optionsHandler;
    const optionsBase = mergeOptions(defaultOptions, AutoHeight.globalOptions);
    const allOptions = mergeOptions(optionsBase, userOptions);
    options = optionsAtMedia(allOptions);
    const {
      options: {
        axis
      },
      slideRects
    } = emblaApi.internalEngine();
    if (axis === 'y') return;
    slideHeights = slideRects.map(slideRect => slideRect.height);
    heightEvents.forEach(evt => emblaApi.on(evt, setContainerHeight));
    setContainerHeight();
  }
  function destroy() {
    heightEvents.forEach(evt => emblaApi.off(evt, setContainerHeight));
    setContainerHeight(undefined, 'destroy');
  }
  function highestInView() {
    const {
      slideRegistry
    } = emblaApi.internalEngine();
    const selectedIndexes = slideRegistry[emblaApi.selectedScrollSnap()];
    return selectedIndexes.map(index => slideHeights[index]).reduce((a, b) => Math.max(a, b), 0);
  }
  function setContainerHeight(_, evt) {
    const height = evt === 'destroy' ? options.destroyHeight : `${highestInView()}px`;
    emblaApi.containerNode().style.height = height;
  }
  const self = {
    name: 'autoHeight',
    options: userOptions,
    init,
    destroy
  };
  return self;
}
AutoHeight.globalOptions = undefined;

export { AutoHeight as default };
//# sourceMappingURL=embla-carousel-auto-height.esm.js.map
