{"version":3,"file":"headers.js","sources":["../../../src/core/headers.ts"],"sourcesContent":["import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  depth: number\n  headers: Header<TData, unknown>[]\n  id: string\n}\n\nexport interface HeaderContext<TData, TValue> {\n  /**\n   * An instance of a column.\n   */\n  column: Column<TData, TValue>\n  /**\n   * An instance of a header.\n   */\n  header: Header<TData, TValue>\n  /**\n   * The table instance.\n   */\n  table: Table<TData>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  /**\n   * The col-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#colspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  colSpan: number\n  /**\n   * The header's associated column object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  column: Column<TData, TValue>\n  /**\n   * The depth of the header, zero-indexed based.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  depth: number\n  /**\n   * Returns the rendering context (or props) for column-based components like headers, footers and filters.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getContext: () => HeaderContext<TData, TValue>\n  /**\n   * Returns the leaf headers hierarchically nested under this header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * The header's associated header group object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#headergroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  headerGroup: HeaderGroup<TData>\n  /**\n   * The unique identifier for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  id: string\n  /**\n   * The index for the header within the header group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  index: number\n  /**\n   * A boolean denoting if the header is a placeholder header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#isplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  isPlaceholder: boolean\n  /**\n   * If the header is a placeholder header, this will be a unique header ID that does not conflict with any other headers across the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#placeholderid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  placeholderId?: string\n  /**\n   * The row-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#rowspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  rowSpan: number\n  /**\n   * The header's hierarchical sub/child headers. Will be empty if the header's associated column is a leaf-column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#subheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  subHeaders: Header<TData, TValue>[]\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  /**\n   * Returns all header groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns the footer groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns headers for all columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  /**\n   * Returns headers for all leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["createHeader","table","column","options","_options$id","id","header","index","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","length","map","push","getContext","_features","forEach","feature","Headers","createTable","getHeaderGroups","memo","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","d","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","key","process","env","NODE_ENV","debug","_table$options$debugA","debugAll","debugHeaders","getCenterHeaderGroups","_table$options$debugA2","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","flat","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","columns","Math","max","getIsVisible","_column$columns","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","_ref","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}