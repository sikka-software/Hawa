{"version":3,"file":"getExpandedRowModel.js","sources":["../../../src/utils/getExpandedRowModel.ts"],"sourcesContent":["import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n"],"names":["getExpandedRowModel","table","memo","getState","expanded","getPreExpandedRowModel","options","paginateExpandedRows","rowModel","rows","length","Object","keys","expandRows","key","process","env","NODE_ENV","debug","_table$options$debugA","debugAll","debugTable","expandedRows","handleRow","row","_row$subRows","push","subRows","getIsExpanded","forEach","flatRows","rowsById"],"mappings":";;;;;;;;;;;;;;AAGO,SAASA,mBAAmBA,GAER;AACzB,EAAA,OAAOC,KAAK,IACVC,UAAI,CACF,MAAM,CACJD,KAAK,CAACE,QAAQ,EAAE,CAACC,QAAQ,EACzBH,KAAK,CAACI,sBAAsB,EAAE,EAC9BJ,KAAK,CAACK,OAAO,CAACC,oBAAoB,CACnC,EACD,CAACH,QAAQ,EAAEI,QAAQ,EAAED,oBAAoB,KAAK;IAC5C,IACE,CAACC,QAAQ,CAACC,IAAI,CAACC,MAAM,IACpBN,QAAQ,KAAK,IAAI,IAAI,CAACO,MAAM,CAACC,IAAI,CAACR,QAAQ,IAARA,IAAAA,GAAAA,QAAQ,GAAI,EAAE,CAAC,CAACM,MAAO,EAC1D;AACA,MAAA,OAAOF,QAAQ,CAAA;AACjB,KAAA;IAEA,IAAI,CAACD,oBAAoB,EAAE;AACzB;AACA,MAAA,OAAOC,QAAQ,CAAA;AACjB,KAAA;IAEA,OAAOK,UAAU,CAACL,QAAQ,CAAC,CAAA;AAC7B,GAAC,EACD;IACEM,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAI,qBAAqB;AACpEC,IAAAA,KAAK,EAAEA,MAAA;AAAA,MAAA,IAAAC,qBAAA,CAAA;AAAA,MAAA,OAAA,CAAAA,qBAAA,GAAMlB,KAAK,CAACK,OAAO,CAACc,QAAQ,KAAAD,IAAAA,GAAAA,qBAAA,GAAIlB,KAAK,CAACK,OAAO,CAACe,UAAU,CAAA;AAAA,KAAA;AACjE,GACF,CAAC,CAAA;AACL,CAAA;AAEO,SAASR,UAAUA,CAAwBL,QAAyB,EAAE;EAC3E,MAAMc,YAA0B,GAAG,EAAE,CAAA;EAErC,MAAMC,SAAS,GAAIC,GAAe,IAAK;AAAA,IAAA,IAAAC,YAAA,CAAA;AACrCH,IAAAA,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC,CAAA;AAEtB,IAAA,IAAI,CAAAC,YAAA,GAAAD,GAAG,CAACG,OAAO,KAAXF,IAAAA,IAAAA,YAAA,CAAaf,MAAM,IAAIc,GAAG,CAACI,aAAa,EAAE,EAAE;AAC9CJ,MAAAA,GAAG,CAACG,OAAO,CAACE,OAAO,CAACN,SAAS,CAAC,CAAA;AAChC,KAAA;GACD,CAAA;AAEDf,EAAAA,QAAQ,CAACC,IAAI,CAACoB,OAAO,CAACN,SAAS,CAAC,CAAA;EAEhC,OAAO;AACLd,IAAAA,IAAI,EAAEa,YAAY;IAClBQ,QAAQ,EAAEtB,QAAQ,CAACsB,QAAQ;IAC3BC,QAAQ,EAAEvB,QAAQ,CAACuB,QAAAA;GACpB,CAAA;AACH;;;;;"}