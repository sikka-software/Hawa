"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-resizable-panels@0.0.55_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/react-resizable-panels@0.0.55_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/react-resizable-panels@0.0.55_react-dom@18.2.0_react@18.2.0/node_modules/react-resizable-panels/dist/react-resizable-panels.development.node.esm.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/react-resizable-panels@0.0.55_react-dom@18.2.0_react@18.2.0/node_modules/react-resizable-panels/dist/react-resizable-panels.development.node.esm.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Panel: () => (/* binding */ Panel),\n/* harmony export */   PanelGroup: () => (/* binding */ PanelGroup),\n/* harmony export */   PanelResizeHandle: () => (/* binding */ PanelResizeHandle),\n/* harmony export */   getAvailableGroupSizePixels: () => (/* binding */ getAvailableGroupSizePixels)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@14.0.4_@opentelemetry+api@1.7.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// This module exists to work around Webpack issue https://github.com/webpack/webpack/issues/14814\n// eslint-disable-next-line no-restricted-imports\nconst { createElement, createContext, forwardRef, useCallback, useContext, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useRef, useState } = react__WEBPACK_IMPORTED_MODULE_0__;\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useId = react__WEBPACK_IMPORTED_MODULE_0__[\"useId\".toString()];\nconst wrappedUseId = typeof useId === \"function\" ? useId : ()=>null;\nlet counter = 0;\nfunction useUniqueId(idFromParams = null) {\n    const idFromUseId = wrappedUseId();\n    const idRef = useRef(idFromParams || idFromUseId || null);\n    if (idRef.current === null) {\n        idRef.current = \"\" + counter++;\n    }\n    return idRef.current;\n}\nconst PanelGroupContext = createContext(null);\nPanelGroupContext.displayName = \"PanelGroupContext\";\nfunction PanelWithForwardedRef({ children = null, className: classNameFromProps = \"\", collapsedSize = 0, collapsible = false, defaultSize = null, forwardedRef, id: idFromProps = null, maxSize = null, minSize, onCollapse = null, onResize = null, order = null, style: styleFromProps = {}, tagName: Type = \"div\" }) {\n    const context = useContext(PanelGroupContext);\n    if (context === null) {\n        throw Error(`Panel components must be rendered within a PanelGroup container`);\n    }\n    const panelId = useUniqueId(idFromProps);\n    const { collapsePanel, expandPanel, getPanelSize, getPanelStyle, registerPanel, resizePanel, units, unregisterPanel } = context;\n    if (minSize == null) {\n        if (units === \"percentages\") {\n            // Mimics legacy default value for percentage based panel groups\n            minSize = 10;\n        } else {\n            // There is no meaningful minimum pixel default we can provide\n            minSize = 0;\n        }\n    }\n    // Use a ref to guard against users passing inline props\n    const callbacksRef = useRef({\n        onCollapse,\n        onResize\n    });\n    useEffect(()=>{\n        callbacksRef.current.onCollapse = onCollapse;\n        callbacksRef.current.onResize = onResize;\n    });\n    const style = getPanelStyle(panelId, defaultSize);\n    const committedValuesRef = useRef({\n        size: parseSizeFromStyle(style)\n    });\n    useRef({\n        callbacksRef,\n        collapsedSize,\n        collapsible,\n        defaultSize,\n        id: panelId,\n        idWasAutoGenerated: idFromProps == null,\n        maxSize,\n        minSize,\n        order\n    });\n    useImperativeHandle(forwardedRef, ()=>({\n            collapse: ()=>collapsePanel(panelId),\n            expand: ()=>expandPanel(panelId),\n            getCollapsed () {\n                return committedValuesRef.current.size === 0;\n            },\n            getId () {\n                return panelId;\n            },\n            getSize (units) {\n                return getPanelSize(panelId, units);\n            },\n            resize: (percentage, units)=>resizePanel(panelId, percentage, units)\n        }), [\n        collapsePanel,\n        expandPanel,\n        getPanelSize,\n        panelId,\n        resizePanel\n    ]);\n    return createElement(Type, {\n        children,\n        className: classNameFromProps,\n        \"data-panel\": \"\",\n        \"data-panel-collapsible\": collapsible || undefined,\n        \"data-panel-id\": panelId,\n        \"data-panel-size\": parseFloat(\"\" + style.flexGrow).toFixed(1),\n        id: `data-panel-id-${panelId}`,\n        style: {\n            ...style,\n            ...styleFromProps\n        }\n    });\n}\nconst Panel = forwardRef((props, ref)=>createElement(PanelWithForwardedRef, {\n        ...props,\n        forwardedRef: ref\n    }));\nPanelWithForwardedRef.displayName = \"Panel\";\nPanel.displayName = \"forwardRef(Panel)\";\n// HACK\nfunction parseSizeFromStyle(style) {\n    const { flexGrow } = style;\n    if (typeof flexGrow === \"string\") {\n        return parseFloat(flexGrow);\n    } else {\n        return flexGrow;\n    }\n}\nconst PRECISION = 10;\nfunction adjustByDelta(event, committedValues, idBefore, idAfter, deltaPixels, prevSizes, panelSizeBeforeCollapse, initialDragState) {\n    const { id: groupId, panels, units } = committedValues;\n    const groupSizePixels = units === \"pixels\" ? getAvailableGroupSizePixels(groupId) : NaN;\n    const { sizes: initialSizes } = initialDragState || {};\n    // If we're resizing by mouse or touch, use the initial sizes as a base.\n    // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.\n    const baseSizes = initialSizes || prevSizes;\n    const panelsArray = panelsMapToSortedArray(panels);\n    const nextSizes = baseSizes.concat();\n    let deltaApplied = 0;\n    // A resizing panel affects the panels before or after it.\n    //\n    // A negative delta means the panel immediately after the resizer should grow/expand by decreasing its offset.\n    // Other panels may also need to shrink/contract (and shift) to make room, depending on the min weights.\n    //\n    // A positive delta means the panel immediately before the resizer should \"expand\".\n    // This is accomplished by shrinking/contracting (and shifting) one or more of the panels after the resizer.\n    // Max-bounds check the panel being expanded first.\n    {\n        const pivotId = deltaPixels < 0 ? idAfter : idBefore;\n        const index = panelsArray.findIndex((panel)=>panel.current.id === pivotId);\n        const panel = panelsArray[index];\n        const baseSize = baseSizes[index];\n        const nextSize = safeResizePanel(units, groupSizePixels, panel, baseSize, baseSize + Math.abs(deltaPixels), event);\n        if (baseSize === nextSize) {\n            // If there's no room for the pivot panel to grow, we can ignore this drag update.\n            return baseSizes;\n        } else {\n            if (nextSize === 0 && baseSize > 0) {\n                panelSizeBeforeCollapse.set(pivotId, baseSize);\n            }\n            deltaPixels = deltaPixels < 0 ? baseSize - nextSize : nextSize - baseSize;\n        }\n    }\n    let pivotId = deltaPixels < 0 ? idBefore : idAfter;\n    let index = panelsArray.findIndex((panel)=>panel.current.id === pivotId);\n    while(true){\n        const panel = panelsArray[index];\n        const baseSize = baseSizes[index];\n        const deltaRemaining = Math.abs(deltaPixels) - Math.abs(deltaApplied);\n        const nextSize = safeResizePanel(units, groupSizePixels, panel, baseSize, baseSize - deltaRemaining, event);\n        if (baseSize !== nextSize) {\n            if (nextSize === 0 && baseSize > 0) {\n                panelSizeBeforeCollapse.set(panel.current.id, baseSize);\n            }\n            deltaApplied += baseSize - nextSize;\n            nextSizes[index] = nextSize;\n            if (deltaApplied.toPrecision(PRECISION).localeCompare(Math.abs(deltaPixels).toPrecision(PRECISION), undefined, {\n                numeric: true\n            }) >= 0) {\n                break;\n            }\n        }\n        if (deltaPixels < 0) {\n            if (--index < 0) {\n                break;\n            }\n        } else {\n            if (++index >= panelsArray.length) {\n                break;\n            }\n        }\n    }\n    // If we were unable to resize any of the panels panels, return the previous state.\n    // This will essentially bailout and ignore the \"mousemove\" event.\n    if (deltaApplied === 0) {\n        return baseSizes;\n    }\n    // Adjust the pivot panel before, but only by the amount that surrounding panels were able to shrink/contract.\n    pivotId = deltaPixels < 0 ? idAfter : idBefore;\n    index = panelsArray.findIndex((panel)=>panel.current.id === pivotId);\n    nextSizes[index] = baseSizes[index] + deltaApplied;\n    return nextSizes;\n}\nfunction callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap) {\n    sizes.forEach((size, index)=>{\n        const panelRef = panelsArray[index];\n        if (!panelRef) {\n            // Handle initial mount (when panels are registered too late to be in the panels array)\n            // The subsequent render+effects will handle the resize notification\n            return;\n        }\n        const { callbacksRef, collapsedSize, collapsible, id } = panelRef.current;\n        const lastNotifiedSize = panelIdToLastNotifiedSizeMap[id];\n        if (lastNotifiedSize !== size) {\n            panelIdToLastNotifiedSizeMap[id] = size;\n            const { onCollapse, onResize } = callbacksRef.current;\n            if (onResize) {\n                onResize(size, lastNotifiedSize);\n            }\n            if (collapsible && onCollapse) {\n                if ((lastNotifiedSize == null || lastNotifiedSize === collapsedSize) && size !== collapsedSize) {\n                    onCollapse(false);\n                } else if (lastNotifiedSize !== collapsedSize && size === collapsedSize) {\n                    onCollapse(true);\n                }\n            }\n        }\n    });\n}\nfunction getBeforeAndAfterIds(id, panelsArray) {\n    if (panelsArray.length < 2) {\n        return [\n            null,\n            null\n        ];\n    }\n    const index = panelsArray.findIndex((panel)=>panel.current.id === id);\n    if (index < 0) {\n        return [\n            null,\n            null\n        ];\n    }\n    const isLastPanel = index === panelsArray.length - 1;\n    const idBefore = isLastPanel ? panelsArray[index - 1].current.id : id;\n    const idAfter = isLastPanel ? id : panelsArray[index + 1].current.id;\n    return [\n        idBefore,\n        idAfter\n    ];\n}\nfunction getAvailableGroupSizePixels(groupId) {\n    const panelGroupElement = getPanelGroup(groupId);\n    if (panelGroupElement == null) {\n        return NaN;\n    }\n    const direction = panelGroupElement.getAttribute(\"data-panel-group-direction\");\n    const resizeHandles = getResizeHandlesForGroup(groupId);\n    if (direction === \"horizontal\") {\n        return panelGroupElement.offsetWidth - resizeHandles.reduce((accumulated, handle)=>{\n            return accumulated + handle.offsetWidth;\n        }, 0);\n    } else {\n        return panelGroupElement.offsetHeight - resizeHandles.reduce((accumulated, handle)=>{\n            return accumulated + handle.offsetHeight;\n        }, 0);\n    }\n}\n// This method returns a number between 1 and 100 representing\n// the % of the group's overall space this panel should occupy.\nfunction getFlexGrow(panels, id, sizes) {\n    if (panels.size === 1) {\n        return \"100\";\n    }\n    const panelsArray = panelsMapToSortedArray(panels);\n    const index = panelsArray.findIndex((panel)=>panel.current.id === id);\n    const size = sizes[index];\n    if (size == null) {\n        return \"0\";\n    }\n    return size.toPrecision(PRECISION);\n}\nfunction getPanel(id) {\n    const element = document.querySelector(`[data-panel-id=\"${id}\"]`);\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction getPanelGroup(id) {\n    const element = document.querySelector(`[data-panel-group-id=\"${id}\"]`);\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction getResizeHandle(id) {\n    const element = document.querySelector(`[data-panel-resize-handle-id=\"${id}\"]`);\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction getResizeHandleIndex(id) {\n    const handles = getResizeHandles();\n    const index = handles.findIndex((handle)=>handle.getAttribute(\"data-panel-resize-handle-id\") === id);\n    return index ?? null;\n}\nfunction getResizeHandles() {\n    return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id]`));\n}\nfunction getResizeHandlesForGroup(groupId) {\n    return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id][data-panel-group-id=\"${groupId}\"]`));\n}\nfunction getResizeHandlePanelIds(groupId, handleId, panelsArray) {\n    const handle = getResizeHandle(handleId);\n    const handles = getResizeHandlesForGroup(groupId);\n    const index = handle ? handles.indexOf(handle) : -1;\n    const idBefore = panelsArray[index]?.current?.id ?? null;\n    const idAfter = panelsArray[index + 1]?.current?.id ?? null;\n    return [\n        idBefore,\n        idAfter\n    ];\n}\nfunction panelsMapToSortedArray(panels) {\n    return Array.from(panels.values()).sort((panelA, panelB)=>{\n        const orderA = panelA.current.order;\n        const orderB = panelB.current.order;\n        if (orderA == null && orderB == null) {\n            return 0;\n        } else if (orderA == null) {\n            return -1;\n        } else if (orderB == null) {\n            return 1;\n        } else {\n            return orderA - orderB;\n        }\n    });\n}\nfunction safeResizePanel(units, groupSizePixels, panel, prevSize, nextSize, event = null) {\n    let { collapsedSize, collapsible, maxSize, minSize } = panel.current;\n    if (units === \"pixels\") {\n        collapsedSize = collapsedSize / groupSizePixels * 100;\n        if (maxSize != null) {\n            maxSize = maxSize / groupSizePixels * 100;\n        }\n        minSize = minSize / groupSizePixels * 100;\n    }\n    if (collapsible) {\n        if (prevSize > collapsedSize) {\n            // Mimic VS COde behavior; collapse a panel if it's smaller than half of its min-size\n            if (nextSize <= minSize / 2 + collapsedSize) {\n                return collapsedSize;\n            }\n        } else {\n            const isKeyboardEvent = event?.type?.startsWith(\"key\");\n            if (!isKeyboardEvent) {\n                // Keyboard events should expand a collapsed panel to the min size,\n                // but mouse events should wait until the panel has reached its min size\n                // to avoid a visual flickering when dragging between collapsed and min size.\n                if (nextSize < minSize) {\n                    return collapsedSize;\n                }\n            }\n        }\n    }\n    return Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSize));\n}\nfunction validatePanelProps(units, panelData) {\n    const { collapsible, defaultSize, maxSize, minSize } = panelData.current;\n    // Basic props validation\n    if (minSize < 0 || units === \"percentages\" && minSize > 100) {\n        {\n            console.error(`Invalid Panel minSize provided, ${minSize}`);\n        }\n        panelData.current.minSize = 0;\n    }\n    if (maxSize != null) {\n        if (maxSize < 0 || units === \"percentages\" && maxSize > 100) {\n            {\n                console.error(`Invalid Panel maxSize provided, ${maxSize}`);\n            }\n            panelData.current.maxSize = null;\n        }\n    }\n    if (defaultSize !== null) {\n        if (defaultSize < 0 || units === \"percentages\" && defaultSize > 100) {\n            {\n                console.error(`Invalid Panel defaultSize provided, ${defaultSize}`);\n            }\n            panelData.current.defaultSize = null;\n        } else if (defaultSize < minSize && !collapsible) {\n            {\n                console.error(`Panel minSize (${minSize}) cannot be greater than defaultSize (${defaultSize})`);\n            }\n            panelData.current.defaultSize = minSize;\n        } else if (maxSize != null && defaultSize > maxSize) {\n            {\n                console.error(`Panel maxSize (${maxSize}) cannot be less than defaultSize (${defaultSize})`);\n            }\n            panelData.current.defaultSize = maxSize;\n        }\n    }\n}\nfunction validatePanelGroupLayout({ groupId, panels, nextSizes, prevSizes, units }) {\n    // Clone because this method modifies\n    nextSizes = [\n        ...nextSizes\n    ];\n    const panelsArray = panelsMapToSortedArray(panels);\n    const groupSizePixels = units === \"pixels\" ? getAvailableGroupSizePixels(groupId) : NaN;\n    let remainingSize = 0;\n    // First, check all of the proposed sizes against the min/max constraints\n    for(let index = 0; index < panelsArray.length; index++){\n        const panel = panelsArray[index];\n        const prevSize = prevSizes[index];\n        const nextSize = nextSizes[index];\n        const safeNextSize = safeResizePanel(units, groupSizePixels, panel, prevSize, nextSize);\n        if (nextSize != safeNextSize) {\n            remainingSize += nextSize - safeNextSize;\n            nextSizes[index] = safeNextSize;\n            {\n                console.error(`Invalid size (${nextSize}) specified for Panel \"${panel.current.id}\" given the panel's min/max size constraints`);\n            }\n        }\n    }\n    // If there is additional, left over space, assign it to any panel(s) that permits it\n    // (It's not worth taking multiple additional passes to evenly distribute)\n    if (remainingSize.toFixed(3) !== \"0.000\") {\n        for(let index = 0; index < panelsArray.length; index++){\n            const panel = panelsArray[index];\n            let { maxSize, minSize } = panel.current;\n            if (units === \"pixels\") {\n                minSize = minSize / groupSizePixels * 100;\n                if (maxSize != null) {\n                    maxSize = maxSize / groupSizePixels * 100;\n                }\n            }\n            const size = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSizes[index] + remainingSize));\n            if (size !== nextSizes[index]) {\n                remainingSize -= size - nextSizes[index];\n                nextSizes[index] = size;\n                // Fuzzy comparison to account for imprecise floating point math\n                if (Math.abs(remainingSize).toFixed(3) === \"0.000\") {\n                    break;\n                }\n            }\n        }\n    }\n    // If we still have remainder, the requested layout wasn't valid and we should warn about it\n    if (remainingSize.toFixed(3) !== \"0.000\") {\n        {\n            console.error(`\"Invalid panel group configuration; default panel sizes should total 100% but was ${100 - remainingSize}%`);\n        }\n    }\n    return nextSizes;\n}\nfunction assert(expectedCondition, message = \"Assertion failed!\") {\n    if (!expectedCondition) {\n        console.error(message);\n        throw Error(message);\n    }\n}\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\nfunction useWindowSplitterPanelGroupBehavior({ committedValuesRef, groupId, panels, setSizes, sizes, panelSizeBeforeCollapse }) {\n    useEffect(()=>{\n        const { direction, panels } = committedValuesRef.current;\n        const groupElement = getPanelGroup(groupId);\n        assert(groupElement != null, `No group found for id \"${groupId}\"`);\n        const { height, width } = groupElement.getBoundingClientRect();\n        const handles = getResizeHandlesForGroup(groupId);\n        const cleanupFunctions = handles.map((handle)=>{\n            const handleId = handle.getAttribute(\"data-panel-resize-handle-id\");\n            const panelsArray = panelsMapToSortedArray(panels);\n            const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);\n            if (idBefore == null || idAfter == null) {\n                return ()=>{};\n            }\n            let currentMinSize = 0;\n            let currentMaxSize = 100;\n            let totalMinSize = 0;\n            let totalMaxSize = 0;\n            // A panel's effective min/max sizes also need to account for other panel's sizes.\n            panelsArray.forEach((panelData)=>{\n                const { id, maxSize, minSize } = panelData.current;\n                if (id === idBefore) {\n                    currentMinSize = minSize;\n                    currentMaxSize = maxSize != null ? maxSize : 100;\n                } else {\n                    totalMinSize += minSize;\n                    totalMaxSize += maxSize != null ? maxSize : 100;\n                }\n            });\n            const ariaValueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n            const ariaValueMin = Math.max(currentMinSize, (panelsArray.length - 1) * 100 - totalMaxSize);\n            const flexGrow = getFlexGrow(panels, idBefore, sizes);\n            handle.setAttribute(\"aria-valuemax\", \"\" + Math.round(ariaValueMax));\n            handle.setAttribute(\"aria-valuemin\", \"\" + Math.round(ariaValueMin));\n            handle.setAttribute(\"aria-valuenow\", \"\" + Math.round(parseInt(flexGrow)));\n            const onKeyDown = (event)=>{\n                if (event.defaultPrevented) {\n                    return;\n                }\n                switch(event.key){\n                    case \"Enter\":\n                        {\n                            event.preventDefault();\n                            const index = panelsArray.findIndex((panel)=>panel.current.id === idBefore);\n                            if (index >= 0) {\n                                const panelData = panelsArray[index];\n                                const size = sizes[index];\n                                if (size != null) {\n                                    let delta = 0;\n                                    if (size.toPrecision(PRECISION) <= panelData.current.minSize.toPrecision(PRECISION)) {\n                                        delta = direction === \"horizontal\" ? width : height;\n                                    } else {\n                                        delta = -(direction === \"horizontal\" ? width : height);\n                                    }\n                                    const nextSizes = adjustByDelta(event, committedValuesRef.current, idBefore, idAfter, delta, sizes, panelSizeBeforeCollapse.current, null);\n                                    if (sizes !== nextSizes) {\n                                        setSizes(nextSizes);\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                }\n            };\n            handle.addEventListener(\"keydown\", onKeyDown);\n            const panelBefore = getPanel(idBefore);\n            if (panelBefore != null) {\n                handle.setAttribute(\"aria-controls\", panelBefore.id);\n            }\n            return ()=>{\n                handle.removeAttribute(\"aria-valuemax\");\n                handle.removeAttribute(\"aria-valuemin\");\n                handle.removeAttribute(\"aria-valuenow\");\n                handle.removeEventListener(\"keydown\", onKeyDown);\n                if (panelBefore != null) {\n                    handle.removeAttribute(\"aria-controls\");\n                }\n            };\n        });\n        return ()=>{\n            cleanupFunctions.forEach((cleanupFunction)=>cleanupFunction());\n        };\n    }, [\n        committedValuesRef,\n        groupId,\n        panels,\n        panelSizeBeforeCollapse,\n        setSizes,\n        sizes\n    ]);\n}\nfunction useWindowSplitterResizeHandlerBehavior({ disabled, handleId, resizeHandler }) {\n    useEffect(()=>{\n        if (disabled || resizeHandler == null) {\n            return;\n        }\n        const handleElement = getResizeHandle(handleId);\n        if (handleElement == null) {\n            return;\n        }\n        const onKeyDown = (event)=>{\n            if (event.defaultPrevented) {\n                return;\n            }\n            switch(event.key){\n                case \"ArrowDown\":\n                case \"ArrowLeft\":\n                case \"ArrowRight\":\n                case \"ArrowUp\":\n                case \"End\":\n                case \"Home\":\n                    {\n                        event.preventDefault();\n                        resizeHandler(event);\n                        break;\n                    }\n                case \"F6\":\n                    {\n                        event.preventDefault();\n                        const handles = getResizeHandles();\n                        const index = getResizeHandleIndex(handleId);\n                        assert(index !== null);\n                        const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;\n                        const nextHandle = handles[nextIndex];\n                        nextHandle.focus();\n                        break;\n                    }\n            }\n        };\n        handleElement.addEventListener(\"keydown\", onKeyDown);\n        return ()=>{\n            handleElement.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [\n        disabled,\n        handleId,\n        resizeHandler\n    ]);\n}\nfunction areEqual(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n    for(let index = 0; index < arrayA.length; index++){\n        if (arrayA[index] !== arrayB[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getDragOffset(event, handleId, direction, initialOffset = 0, initialHandleElementRect = null) {\n    const isHorizontal = direction === \"horizontal\";\n    let pointerOffset = 0;\n    if (isMouseEvent(event)) {\n        pointerOffset = isHorizontal ? event.clientX : event.clientY;\n    } else if (isTouchEvent(event)) {\n        const firstTouch = event.touches[0];\n        pointerOffset = isHorizontal ? firstTouch.screenX : firstTouch.screenY;\n    } else {\n        return 0;\n    }\n    const handleElement = getResizeHandle(handleId);\n    const rect = initialHandleElementRect || handleElement.getBoundingClientRect();\n    const elementOffset = isHorizontal ? rect.left : rect.top;\n    return pointerOffset - elementOffset - initialOffset;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\nfunction getMovement(event, groupId, handleId, panelsArray, direction, prevSizes, initialDragState) {\n    const { dragOffset = 0, dragHandleRect, sizes: initialSizes } = initialDragState || {};\n    // If we're resizing by mouse or touch, use the initial sizes as a base.\n    // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.\n    const baseSizes = initialSizes || prevSizes;\n    if (isKeyDown(event)) {\n        const isHorizontal = direction === \"horizontal\";\n        const groupElement = getPanelGroup(groupId);\n        const rect = groupElement.getBoundingClientRect();\n        const groupSizeInPixels = isHorizontal ? rect.width : rect.height;\n        const denominator = event.shiftKey ? 10 : 100;\n        const delta = groupSizeInPixels / denominator;\n        let movement = 0;\n        switch(event.key){\n            case \"ArrowDown\":\n                movement = isHorizontal ? 0 : delta;\n                break;\n            case \"ArrowLeft\":\n                movement = isHorizontal ? -delta : 0;\n                break;\n            case \"ArrowRight\":\n                movement = isHorizontal ? delta : 0;\n                break;\n            case \"ArrowUp\":\n                movement = isHorizontal ? 0 : -delta;\n                break;\n            case \"End\":\n                movement = groupSizeInPixels;\n                break;\n            case \"Home\":\n                movement = -groupSizeInPixels;\n                break;\n        }\n        // If the Panel being resized is collapsible,\n        // we need to special case resizing around the minSize boundary.\n        // If contracting, Panels should shrink to their minSize and then snap to fully collapsed.\n        // If expanding from collapsed, they should snap back to their minSize.\n        const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);\n        const targetPanelId = movement < 0 ? idBefore : idAfter;\n        const targetPanelIndex = panelsArray.findIndex((panel)=>panel.current.id === targetPanelId);\n        const targetPanel = panelsArray[targetPanelIndex];\n        if (targetPanel.current.collapsible) {\n            const baseSize = baseSizes[targetPanelIndex];\n            if (baseSize === 0 || baseSize.toPrecision(PRECISION) === targetPanel.current.minSize.toPrecision(PRECISION)) {\n                movement = movement < 0 ? -targetPanel.current.minSize * groupSizeInPixels : targetPanel.current.minSize * groupSizeInPixels;\n            }\n        }\n        return movement;\n    } else {\n        return getDragOffset(event, handleId, direction, dragOffset, dragHandleRect);\n    }\n}\nfunction isKeyDown(event) {\n    return event.type === \"keydown\";\n}\nfunction isMouseEvent(event) {\n    return event.type.startsWith(\"mouse\");\n}\nfunction isTouchEvent(event) {\n    return event.type.startsWith(\"touch\");\n}\nlet currentState = null;\nlet element = null;\nfunction getCursorStyle(state) {\n    switch(state){\n        case \"horizontal\":\n            return \"ew-resize\";\n        case \"horizontal-max\":\n            return \"w-resize\";\n        case \"horizontal-min\":\n            return \"e-resize\";\n        case \"vertical\":\n            return \"ns-resize\";\n        case \"vertical-max\":\n            return \"n-resize\";\n        case \"vertical-min\":\n            return \"s-resize\";\n    }\n}\nfunction resetGlobalCursorStyle() {\n    if (element !== null) {\n        document.head.removeChild(element);\n        currentState = null;\n        element = null;\n    }\n}\nfunction setGlobalCursorStyle(state) {\n    if (currentState === state) {\n        return;\n    }\n    currentState = state;\n    const style = getCursorStyle(state);\n    if (element === null) {\n        element = document.createElement(\"style\");\n        document.head.appendChild(element);\n    }\n    element.innerHTML = `*{cursor: ${style}!important;}`;\n}\nfunction debounce(callback, durationMs = 10) {\n    let timeoutId = null;\n    let callable = (...args)=>{\n        if (timeoutId !== null) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(()=>{\n            callback(...args);\n        }, durationMs);\n    };\n    return callable;\n}\n// Note that Panel ids might be user-provided (stable) or useId generated (non-deterministic)\n// so they should not be used as part of the serialization key.\n// Using an attribute like minSize instead should work well enough.\n// Pre-sorting by minSize allows remembering layouts even if panels are re-ordered/dragged.\nfunction getSerializationKey(panels) {\n    return panels.map((panel)=>{\n        const { minSize, order } = panel.current;\n        return order ? `${order}:${minSize}` : `${minSize}`;\n    }).sort((a, b)=>a.localeCompare(b)).join(\",\");\n}\nfunction loadSerializedPanelGroupState(autoSaveId, storage) {\n    try {\n        const serialized = storage.getItem(`PanelGroup:sizes:${autoSaveId}`);\n        if (serialized) {\n            const parsed = JSON.parse(serialized);\n            if (typeof parsed === \"object\" && parsed != null) {\n                return parsed;\n            }\n        }\n    } catch (error) {}\n    return null;\n}\nfunction savePanelGroupLayout(autoSaveId, panels, sizes, storage) {\n    const key = getSerializationKey(panels);\n    const state = loadSerializedPanelGroupState(autoSaveId, storage) || {};\n    state[key] = sizes;\n    try {\n        storage.setItem(`PanelGroup:sizes:${autoSaveId}`, JSON.stringify(state));\n    } catch (error) {\n        console.error(error);\n    }\n}\nconst debounceMap = {};\n// PanelGroup might be rendering in a server-side environment where localStorage is not available\n// or on a browser with cookies/storage disabled.\n// In either case, this function avoids accessing localStorage until needed,\n// and avoids throwing user-visible errors.\nfunction initializeDefaultStorage(storageObject) {\n    try {\n        if (typeof localStorage !== \"undefined\") {\n            // Bypass this check for future calls\n            storageObject.getItem = (name)=>{\n                return localStorage.getItem(name);\n            };\n            storageObject.setItem = (name, value)=>{\n                localStorage.setItem(name, value);\n            };\n        } else {\n            throw new Error(\"localStorage not supported in this environment\");\n        }\n    } catch (error) {\n        console.error(error);\n        storageObject.getItem = ()=>null;\n        storageObject.setItem = ()=>{};\n    }\n}\nconst defaultStorage = {\n    getItem: (name)=>{\n        initializeDefaultStorage(defaultStorage);\n        return defaultStorage.getItem(name);\n    },\n    setItem: (name, value)=>{\n        initializeDefaultStorage(defaultStorage);\n        defaultStorage.setItem(name, value);\n    }\n};\n// Initial drag state serves a few purposes:\n// * dragOffset:\n//   Resize is calculated by the distance between the current pointer event and the resize handle being \"dragged\"\n//   This value accounts for the initial offset when the touch/click starts, so the handle doesn't appear to \"jump\"\n// * dragHandleRect, sizes:\n//   When resizing is done via mouse/touch event– some initial state is stored\n//   so that any panels that contract will also expand if drag direction is reversed.\nfunction PanelGroupWithForwardedRef({ autoSaveId, children = null, className: classNameFromProps = \"\", direction, disablePointerEventsDuringResize = false, forwardedRef, id: idFromProps = null, onLayout, storage = defaultStorage, style: styleFromProps = {}, tagName: Type = \"div\", units = \"percentages\" }) {\n    const groupId = useUniqueId(idFromProps);\n    const [activeHandleId, setActiveHandleId] = useState(null);\n    const [panels, setPanels] = useState(new Map());\n    // When resizing is done via mouse/touch event–\n    // We store the initial Panel sizes in this ref, and apply move deltas to them instead of to the current sizes.\n    // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.\n    const initialDragStateRef = useRef(null);\n    const devWarningsRef = useRef({\n        didLogDefaultSizeWarning: false,\n        didLogIdAndOrderWarning: false,\n        didLogInvalidLayoutWarning: false,\n        prevPanelIds: []\n    });\n    // Use a ref to guard against users passing inline props\n    const callbacksRef = useRef({\n        onLayout\n    });\n    useEffect(()=>{\n        callbacksRef.current.onLayout = onLayout;\n    });\n    const panelIdToLastNotifiedSizeMapRef = useRef({});\n    // 0-1 values representing the relative size of each panel.\n    const [sizes, setSizes] = useState([]);\n    // Used to support imperative collapse/expand API.\n    const panelSizeBeforeCollapse = useRef(new Map());\n    const prevDeltaRef = useRef(0);\n    // Store committed values to avoid unnecessarily re-running memoization/effects functions.\n    const committedValuesRef = useRef({\n        direction,\n        id: groupId,\n        panels,\n        sizes,\n        units\n    });\n    useImperativeHandle(forwardedRef, ()=>({\n            getId: ()=>groupId,\n            getLayout: (unitsFromParams)=>{\n                const { sizes, units: unitsFromProps } = committedValuesRef.current;\n                const units = unitsFromParams ?? unitsFromProps;\n                if (units === \"pixels\") {\n                    const groupSizePixels = getAvailableGroupSizePixels(groupId);\n                    return sizes.map((size)=>size / 100 * groupSizePixels);\n                } else {\n                    return sizes;\n                }\n            },\n            setLayout: (sizes, unitsFromParams)=>{\n                const { id: groupId, panels, sizes: prevSizes, units } = committedValuesRef.current;\n                if ((unitsFromParams || units) === \"pixels\") {\n                    const groupSizePixels = getAvailableGroupSizePixels(groupId);\n                    sizes = sizes.map((size)=>size / groupSizePixels * 100);\n                }\n                const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n                const panelsArray = panelsMapToSortedArray(panels);\n                const nextSizes = validatePanelGroupLayout({\n                    groupId,\n                    panels,\n                    nextSizes: sizes,\n                    prevSizes,\n                    units\n                });\n                if (!areEqual(prevSizes, nextSizes)) {\n                    setSizes(nextSizes);\n                    callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);\n                }\n            }\n        }), [\n        groupId\n    ]);\n    useWindowSplitterPanelGroupBehavior({\n        committedValuesRef,\n        groupId,\n        panels,\n        setSizes,\n        sizes,\n        panelSizeBeforeCollapse\n    });\n    // Notify external code when sizes have changed.\n    useEffect(()=>{\n        const { onLayout } = callbacksRef.current;\n        const { panels, sizes } = committedValuesRef.current;\n        // Don't commit layout until all panels have registered and re-rendered with their actual sizes.\n        if (sizes.length > 0) {\n            if (onLayout) {\n                onLayout(sizes);\n            }\n            const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n            // When possible, we notify before the next render so that rendering work can be batched together.\n            // Some cases are difficult to detect though,\n            // for example– panels that are conditionally rendered can affect the size of neighboring panels.\n            // In this case, the best we can do is notify on commit.\n            // The callPanelCallbacks() uses its own memoization to avoid notifying panels twice in these cases.\n            const panelsArray = panelsMapToSortedArray(panels);\n            callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap);\n        }\n    }, [\n        sizes\n    ]);\n    useEffect(()=>{\n        // If this panel has been configured to persist sizing information, save sizes to local storage.\n        if (autoSaveId) {\n            if (sizes.length === 0 || sizes.length !== panels.size) {\n                return;\n            }\n            const panelsArray = panelsMapToSortedArray(panels);\n            // Limit the frequency of localStorage updates.\n            if (!debounceMap[autoSaveId]) {\n                debounceMap[autoSaveId] = debounce(savePanelGroupLayout, 100);\n            }\n            debounceMap[autoSaveId](autoSaveId, panelsArray, sizes, storage);\n        }\n        {\n            const { didLogIdAndOrderWarning, prevPanelIds } = devWarningsRef.current;\n            if (!didLogIdAndOrderWarning) {\n                const { panels } = committedValuesRef.current;\n                const panelIds = Array.from(panels.keys());\n                devWarningsRef.current.prevPanelIds = panelIds;\n                const panelsHaveChanged = prevPanelIds.length > 0 && !areEqual(prevPanelIds, panelIds);\n                if (panelsHaveChanged) {\n                    if (Array.from(panels.values()).find((panel)=>panel.current.idWasAutoGenerated || panel.current.order == null)) {\n                        devWarningsRef.current.didLogIdAndOrderWarning = true;\n                        console.warn(`WARNING: Panel id and order props recommended when panels are dynamically rendered`);\n                    }\n                }\n            }\n        }\n    }, [\n        autoSaveId,\n        panels,\n        sizes,\n        storage\n    ]);\n    const getPanelSize = useCallback((id, unitsFromParams)=>{\n        const { panels, units: unitsFromProps } = committedValuesRef.current;\n        const panelsArray = panelsMapToSortedArray(panels);\n        const index = panelsArray.findIndex((panel)=>panel.current.id === id);\n        const size = sizes[index];\n        const units = unitsFromParams ?? unitsFromProps;\n        if (units === \"pixels\") {\n            const groupSizePixels = getAvailableGroupSizePixels(groupId);\n            return size / 100 * groupSizePixels;\n        } else {\n            return size;\n        }\n    }, [\n        groupId,\n        sizes\n    ]);\n    const getPanelStyle = useCallback((id, defaultSize)=>{\n        const { panels } = committedValuesRef.current;\n        // Before mounting, Panels will not yet have registered themselves.\n        // This includes server rendering.\n        // At this point the best we can do is render everything with the same size.\n        if (panels.size === 0) {\n            {\n                if (!devWarningsRef.current.didLogDefaultSizeWarning) {\n                    if (defaultSize == null) {\n                        devWarningsRef.current.didLogDefaultSizeWarning = true;\n                        console.warn(`WARNING: Panel defaultSize prop recommended to avoid layout shift after server rendering`);\n                    }\n                }\n            }\n            return {\n                flexBasis: 0,\n                flexGrow: defaultSize != null ? defaultSize : undefined,\n                flexShrink: 1,\n                // Without this, Panel sizes may be unintentionally overridden by their content.\n                overflow: \"hidden\"\n            };\n        }\n        const flexGrow = getFlexGrow(panels, id, sizes);\n        return {\n            flexBasis: 0,\n            flexGrow,\n            flexShrink: 1,\n            // Without this, Panel sizes may be unintentionally overridden by their content.\n            overflow: \"hidden\",\n            // Disable pointer events inside of a panel during resize.\n            // This avoid edge cases like nested iframes.\n            pointerEvents: disablePointerEventsDuringResize && activeHandleId !== null ? \"none\" : undefined\n        };\n    }, [\n        activeHandleId,\n        disablePointerEventsDuringResize,\n        sizes\n    ]);\n    const registerPanel = useCallback((id, panelRef)=>{\n        const { units } = committedValuesRef.current;\n        validatePanelProps(units, panelRef);\n        setPanels((prevPanels)=>{\n            if (prevPanels.has(id)) {\n                return prevPanels;\n            }\n            const nextPanels = new Map(prevPanels);\n            nextPanels.set(id, panelRef);\n            return nextPanels;\n        });\n    }, []);\n    const registerResizeHandle = useCallback((handleId)=>{\n        const resizeHandler = (event)=>{\n            event.preventDefault();\n            const { direction, panels, sizes: prevSizes } = committedValuesRef.current;\n            const panelsArray = panelsMapToSortedArray(panels);\n            const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);\n            if (idBefore == null || idAfter == null) {\n                return;\n            }\n            let movement = getMovement(event, groupId, handleId, panelsArray, direction, prevSizes, initialDragStateRef.current);\n            if (movement === 0) {\n                return;\n            }\n            const groupElement = getPanelGroup(groupId);\n            const rect = groupElement.getBoundingClientRect();\n            const isHorizontal = direction === \"horizontal\";\n            // Support RTL layouts\n            if (document.dir === \"rtl\" && isHorizontal) {\n                movement = -movement;\n            }\n            const size = isHorizontal ? rect.width : rect.height;\n            const delta = movement / size * 100;\n            // If a validateLayout method has been provided\n            // it's important to use it before updating the mouse cursor\n            const nextSizes = adjustByDelta(event, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, initialDragStateRef.current);\n            const sizesChanged = !areEqual(prevSizes, nextSizes);\n            // Don't update cursor for resizes triggered by keyboard interactions.\n            if (isMouseEvent(event) || isTouchEvent(event)) {\n                // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.\n                // In this case, Panel sizes might not change–\n                // but updating cursor in this scenario would cause a flicker.\n                if (prevDeltaRef.current != delta) {\n                    if (!sizesChanged) {\n                        // If the pointer has moved too far to resize the panel any further,\n                        // update the cursor style for a visual clue.\n                        // This mimics VS Code behavior.\n                        if (isHorizontal) {\n                            setGlobalCursorStyle(movement < 0 ? \"horizontal-min\" : \"horizontal-max\");\n                        } else {\n                            setGlobalCursorStyle(movement < 0 ? \"vertical-min\" : \"vertical-max\");\n                        }\n                    } else {\n                        // Reset the cursor style to the the normal resize cursor.\n                        setGlobalCursorStyle(isHorizontal ? \"horizontal\" : \"vertical\");\n                    }\n                }\n            }\n            if (sizesChanged) {\n                const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n                // It's okay to bypass in this case because we already validated above\n                setSizes(nextSizes);\n                // If resize change handlers have been declared, this is the time to call them.\n                // Trigger user callbacks after updating state, so that user code can override the sizes.\n                callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);\n            }\n            prevDeltaRef.current = delta;\n        };\n        return resizeHandler;\n    }, [\n        groupId\n    ]);\n    const unregisterPanel = useCallback((id)=>{\n        setPanels((prevPanels)=>{\n            if (!prevPanels.has(id)) {\n                return prevPanels;\n            }\n            const nextPanels = new Map(prevPanels);\n            nextPanels.delete(id);\n            return nextPanels;\n        });\n    }, []);\n    const collapsePanel = useCallback((id)=>{\n        const { panels, sizes: prevSizes } = committedValuesRef.current;\n        const panel = panels.get(id);\n        if (panel == null) {\n            return;\n        }\n        const { collapsedSize, collapsible } = panel.current;\n        if (!collapsible) {\n            return;\n        }\n        const panelsArray = panelsMapToSortedArray(panels);\n        const index = panelsArray.indexOf(panel);\n        if (index < 0) {\n            return;\n        }\n        const currentSize = prevSizes[index];\n        if (currentSize === collapsedSize) {\n            // Panel is already collapsed.\n            return;\n        }\n        panelSizeBeforeCollapse.current.set(id, currentSize);\n        const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);\n        if (idBefore == null || idAfter == null) {\n            return;\n        }\n        const isLastPanel = index === panelsArray.length - 1;\n        const delta = isLastPanel ? currentSize : collapsedSize - currentSize;\n        const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);\n        if (prevSizes !== nextSizes) {\n            const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n            setSizes(nextSizes);\n            // If resize change handlers have been declared, this is the time to call them.\n            // Trigger user callbacks after updating state, so that user code can override the sizes.\n            callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);\n        }\n    }, []);\n    const expandPanel = useCallback((id)=>{\n        const { panels, sizes: prevSizes } = committedValuesRef.current;\n        const panel = panels.get(id);\n        if (panel == null) {\n            return;\n        }\n        const { collapsedSize, minSize } = panel.current;\n        const sizeBeforeCollapse = panelSizeBeforeCollapse.current.get(id) || minSize;\n        if (!sizeBeforeCollapse) {\n            return;\n        }\n        const panelsArray = panelsMapToSortedArray(panels);\n        const index = panelsArray.indexOf(panel);\n        if (index < 0) {\n            return;\n        }\n        const currentSize = prevSizes[index];\n        if (currentSize !== collapsedSize) {\n            // Panel is already expanded.\n            return;\n        }\n        const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);\n        if (idBefore == null || idAfter == null) {\n            return;\n        }\n        const isLastPanel = index === panelsArray.length - 1;\n        const delta = isLastPanel ? collapsedSize - sizeBeforeCollapse : sizeBeforeCollapse;\n        const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);\n        if (prevSizes !== nextSizes) {\n            const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n            setSizes(nextSizes);\n            // If resize change handlers have been declared, this is the time to call them.\n            // Trigger user callbacks after updating state, so that user code can override the sizes.\n            callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);\n        }\n    }, []);\n    const resizePanel = useCallback((id, nextSize, unitsFromParams)=>{\n        const { id: groupId, panels, sizes: prevSizes, units } = committedValuesRef.current;\n        if ((unitsFromParams || units) === \"pixels\") {\n            const groupSizePixels = getAvailableGroupSizePixels(groupId);\n            nextSize = nextSize / groupSizePixels * 100;\n        }\n        const panel = panels.get(id);\n        if (panel == null) {\n            return;\n        }\n        let { collapsedSize, collapsible, maxSize, minSize } = panel.current;\n        if (units === \"pixels\") {\n            const groupSizePixels = getAvailableGroupSizePixels(groupId);\n            minSize = minSize / groupSizePixels * 100;\n            if (maxSize != null) {\n                maxSize = maxSize / groupSizePixels * 100;\n            }\n        }\n        const panelsArray = panelsMapToSortedArray(panels);\n        const index = panelsArray.indexOf(panel);\n        if (index < 0) {\n            return;\n        }\n        const currentSize = prevSizes[index];\n        if (currentSize === nextSize) {\n            return;\n        }\n        if (collapsible && nextSize === collapsedSize) ;\n        else {\n            const unsafeNextSize = nextSize;\n            nextSize = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSize));\n            {\n                if (unsafeNextSize !== nextSize) {\n                    console.error(`Invalid size (${unsafeNextSize}) specified for Panel \"${panel.current.id}\" given the panel's min/max size constraints`);\n                }\n            }\n        }\n        const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);\n        if (idBefore == null || idAfter == null) {\n            return;\n        }\n        const isLastPanel = index === panelsArray.length - 1;\n        const delta = isLastPanel ? currentSize - nextSize : nextSize - currentSize;\n        const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);\n        if (prevSizes !== nextSizes) {\n            const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;\n            setSizes(nextSizes);\n            // If resize change handlers have been declared, this is the time to call them.\n            // Trigger user callbacks after updating state, so that user code can override the sizes.\n            callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);\n        }\n    }, []);\n    const context = useMemo(()=>({\n            activeHandleId,\n            collapsePanel,\n            direction,\n            expandPanel,\n            getPanelSize,\n            getPanelStyle,\n            groupId,\n            registerPanel,\n            registerResizeHandle,\n            resizePanel,\n            startDragging: (id, event)=>{\n                setActiveHandleId(id);\n                if (isMouseEvent(event) || isTouchEvent(event)) {\n                    const handleElement = getResizeHandle(id);\n                    initialDragStateRef.current = {\n                        dragHandleRect: handleElement.getBoundingClientRect(),\n                        dragOffset: getDragOffset(event, id, direction),\n                        sizes: committedValuesRef.current.sizes\n                    };\n                }\n            },\n            stopDragging: ()=>{\n                resetGlobalCursorStyle();\n                setActiveHandleId(null);\n                initialDragStateRef.current = null;\n            },\n            units,\n            unregisterPanel\n        }), [\n        activeHandleId,\n        collapsePanel,\n        direction,\n        expandPanel,\n        getPanelSize,\n        getPanelStyle,\n        groupId,\n        registerPanel,\n        registerResizeHandle,\n        resizePanel,\n        units,\n        unregisterPanel\n    ]);\n    const style = {\n        display: \"flex\",\n        flexDirection: direction === \"horizontal\" ? \"row\" : \"column\",\n        height: \"100%\",\n        overflow: \"hidden\",\n        width: \"100%\"\n    };\n    return createElement(PanelGroupContext.Provider, {\n        children: createElement(Type, {\n            children,\n            className: classNameFromProps,\n            \"data-panel-group\": \"\",\n            \"data-panel-group-direction\": direction,\n            \"data-panel-group-id\": groupId,\n            \"data-panel-group-units\": units,\n            style: {\n                ...style,\n                ...styleFromProps\n            }\n        }),\n        value: context\n    });\n}\nconst PanelGroup = forwardRef((props, ref)=>createElement(PanelGroupWithForwardedRef, {\n        ...props,\n        forwardedRef: ref\n    }));\nPanelGroupWithForwardedRef.displayName = \"PanelGroup\";\nPanelGroup.displayName = \"forwardRef(PanelGroup)\";\nfunction PanelResizeHandle({ children = null, className: classNameFromProps = \"\", disabled = false, id: idFromProps = null, onDragging, style: styleFromProps = {}, tagName: Type = \"div\" }) {\n    const divElementRef = useRef(null);\n    // Use a ref to guard against users passing inline props\n    const callbacksRef = useRef({\n        onDragging\n    });\n    useEffect(()=>{\n        callbacksRef.current.onDragging = onDragging;\n    });\n    const panelGroupContext = useContext(PanelGroupContext);\n    if (panelGroupContext === null) {\n        throw Error(`PanelResizeHandle components must be rendered within a PanelGroup container`);\n    }\n    const { activeHandleId, direction, groupId, registerResizeHandle, startDragging, stopDragging } = panelGroupContext;\n    const resizeHandleId = useUniqueId(idFromProps);\n    const isDragging = activeHandleId === resizeHandleId;\n    const [isFocused, setIsFocused] = useState(false);\n    const [resizeHandler, setResizeHandler] = useState(null);\n    const stopDraggingAndBlur = useCallback(()=>{\n        // Clicking on the drag handle shouldn't leave it focused;\n        // That would cause the PanelGroup to think it was still active.\n        const div = divElementRef.current;\n        div.blur();\n        stopDragging();\n        const { onDragging } = callbacksRef.current;\n        if (onDragging) {\n            onDragging(false);\n        }\n    }, [\n        stopDragging\n    ]);\n    useEffect(()=>{\n        if (disabled) {\n            setResizeHandler(null);\n        } else {\n            const resizeHandler = registerResizeHandle(resizeHandleId);\n            setResizeHandler(()=>resizeHandler);\n        }\n    }, [\n        disabled,\n        resizeHandleId,\n        registerResizeHandle\n    ]);\n    useEffect(()=>{\n        if (disabled || resizeHandler == null || !isDragging) {\n            return;\n        }\n        const onMove = (event)=>{\n            resizeHandler(event);\n        };\n        const onMouseLeave = (event)=>{\n            resizeHandler(event);\n        };\n        const divElement = divElementRef.current;\n        const targetDocument = divElement.ownerDocument;\n        targetDocument.body.addEventListener(\"contextmenu\", stopDraggingAndBlur);\n        targetDocument.body.addEventListener(\"mousemove\", onMove);\n        targetDocument.body.addEventListener(\"touchmove\", onMove);\n        targetDocument.body.addEventListener(\"mouseleave\", onMouseLeave);\n        window.addEventListener(\"mouseup\", stopDraggingAndBlur);\n        window.addEventListener(\"touchend\", stopDraggingAndBlur);\n        return ()=>{\n            targetDocument.body.removeEventListener(\"contextmenu\", stopDraggingAndBlur);\n            targetDocument.body.removeEventListener(\"mousemove\", onMove);\n            targetDocument.body.removeEventListener(\"touchmove\", onMove);\n            targetDocument.body.removeEventListener(\"mouseleave\", onMouseLeave);\n            window.removeEventListener(\"mouseup\", stopDraggingAndBlur);\n            window.removeEventListener(\"touchend\", stopDraggingAndBlur);\n        };\n    }, [\n        direction,\n        disabled,\n        isDragging,\n        resizeHandler,\n        stopDraggingAndBlur\n    ]);\n    useWindowSplitterResizeHandlerBehavior({\n        disabled,\n        handleId: resizeHandleId,\n        resizeHandler\n    });\n    const style = {\n        cursor: getCursorStyle(direction),\n        touchAction: \"none\",\n        userSelect: \"none\"\n    };\n    return createElement(Type, {\n        children,\n        className: classNameFromProps,\n        \"data-resize-handle-active\": isDragging ? \"pointer\" : isFocused ? \"keyboard\" : undefined,\n        \"data-panel-group-direction\": direction,\n        \"data-panel-group-id\": groupId,\n        \"data-panel-resize-handle-enabled\": !disabled,\n        \"data-panel-resize-handle-id\": resizeHandleId,\n        onBlur: ()=>setIsFocused(false),\n        onFocus: ()=>setIsFocused(true),\n        onMouseDown: (event)=>{\n            startDragging(resizeHandleId, event.nativeEvent);\n            const { onDragging } = callbacksRef.current;\n            if (onDragging) {\n                onDragging(true);\n            }\n        },\n        onMouseUp: stopDraggingAndBlur,\n        onTouchCancel: stopDraggingAndBlur,\n        onTouchEnd: stopDraggingAndBlur,\n        onTouchStart: (event)=>{\n            startDragging(resizeHandleId, event.nativeEvent);\n            const { onDragging } = callbacksRef.current;\n            if (onDragging) {\n                onDragging(true);\n            }\n        },\n        ref: divElementRef,\n        role: \"separator\",\n        style: {\n            ...style,\n            ...styleFromProps\n        },\n        tabIndex: 0\n    });\n}\nPanelResizeHandle.displayName = \"PanelResizeHandle\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/react-resizable-panels@0.0.55_react-dom@18.2.0_react@18.2.0/node_modules/react-resizable-panels/dist/react-resizable-panels.development.node.esm.js\n");

/***/ })

};
;