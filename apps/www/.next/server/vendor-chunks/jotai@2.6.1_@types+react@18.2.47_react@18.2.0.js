"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jotai@2.6.1_@types+react@18.2.47_react@18.2.0";
exports.ids = ["vendor-chunks/jotai@2.6.1_@types+react@18.2.47_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/react.mjs":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/react.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   useAtom: () => (/* binding */ useAtom),\n/* harmony export */   useAtomValue: () => (/* binding */ useAtomValue),\n/* harmony export */   useSetAtom: () => (/* binding */ useSetAtom),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@14.0.4_@opentelemetry+api@1.7.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jotai/vanilla */ \"(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla.mjs\");\n/* __next_internal_client_entry_do_not_use__ Provider,useAtom,useAtomValue,useSetAtom,useStore auto */ \n\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nconst useStore = (options)=>{\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    return (options == null ? void 0 : options.store) || store || (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.getDefaultStore)();\n};\nconst Provider = ({ children, store })=>{\n    const storeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!store && !storeRef.current) {\n        storeRef.current = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)();\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(StoreContext.Provider, {\n        value: store || storeRef.current\n    }, children);\n};\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nconst use = (react__WEBPACK_IMPORTED_MODULE_0___default().use) || ((promise)=>{\n    if (promise.status === \"pending\") {\n        throw promise;\n    } else if (promise.status === \"fulfilled\") {\n        return promise.value;\n    } else if (promise.status === \"rejected\") {\n        throw promise.reason;\n    } else {\n        promise.status = \"pending\";\n        promise.then((v)=>{\n            promise.status = \"fulfilled\";\n            promise.value = v;\n        }, (e)=>{\n            promise.status = \"rejected\";\n            promise.reason = e;\n        });\n        throw promise;\n    }\n});\nfunction useAtomValue(atom, options) {\n    const store = useStore(options);\n    const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((prev)=>{\n        const nextValue = store.get(atom);\n        if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom) {\n            return prev;\n        }\n        return [\n            nextValue,\n            store,\n            atom\n        ];\n    }, void 0, ()=>[\n            store.get(atom),\n            store,\n            atom\n        ]);\n    let value = valueFromReducer;\n    if (storeFromReducer !== store || atomFromReducer !== atom) {\n        rerender();\n        value = store.get(atom);\n    }\n    const delay = options == null ? void 0 : options.delay;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const unsub = store.sub(atom, ()=>{\n            if (typeof delay === \"number\") {\n                setTimeout(rerender, delay);\n                return;\n            }\n            rerender();\n        });\n        rerender();\n        return unsub;\n    }, [\n        store,\n        atom,\n        delay\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(value);\n    return isPromiseLike(value) ? use(value) : value;\n}\nfunction useSetAtom(atom, options) {\n    const store = useStore(options);\n    const setAtom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        if (( false ? 0 : void 0) !== \"production\" && !(\"write\" in atom)) {\n            throw new Error(\"not writable atom\");\n        }\n        return store.set(atom, ...args);\n    }, [\n        store,\n        atom\n    ]);\n    return setAtom;\n}\nfunction useAtom(atom, options) {\n    return [\n        useAtomValue(atom, options),\n        // We do wrong type assertion here, which results in throwing an error.\n        useSetAtom(atom, options)\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2pvdGFpQDIuNi4xX0B0eXBlcytyZWFjdEAxOC4yLjQ3X3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvam90YWkvZXNtL3JlYWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozt1R0FDMEk7QUFDN0U7QUFFN0QsTUFBTVcsNkJBQWVWLG9EQUFhQSxDQUFDLEtBQUs7QUFDeEMsTUFBTVcsV0FBVyxDQUFDQztJQUNoQixNQUFNQyxRQUFRWixpREFBVUEsQ0FBQ1M7SUFDekIsT0FBTyxDQUFDRSxXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRQyxLQUFLLEtBQUtBLFNBQVNMLDhEQUFlQTtBQUMvRTtBQUNBLE1BQU1NLFdBQVcsQ0FBQyxFQUNoQkMsUUFBUSxFQUNSRixLQUFLLEVBQ047SUFDQyxNQUFNRyxXQUFXZCw2Q0FBTUE7SUFDdkIsSUFBSSxDQUFDVyxTQUFTLENBQUNHLFNBQVNDLE9BQU8sRUFBRTtRQUMvQkQsU0FBU0MsT0FBTyxHQUFHUiwwREFBV0E7SUFDaEM7SUFDQSxxQkFBT04sb0RBQWFBLENBQ2xCTyxhQUFhSSxRQUFRLEVBQ3JCO1FBQ0VJLE9BQU9MLFNBQVNHLFNBQVNDLE9BQU87SUFDbEMsR0FDQUY7QUFFSjtBQUVBLE1BQU1JLGdCQUFnQixDQUFDQyxJQUFNLE9BQVFBLENBQUFBLEtBQUssT0FBTyxLQUFLLElBQUlBLEVBQUVDLElBQUksTUFBTTtBQUN0RSxNQUFNQyxNQUFNdkIsa0RBQWdCLElBQUssRUFBQ3dCO0lBQ2hDLElBQUlBLFFBQVFDLE1BQU0sS0FBSyxXQUFXO1FBQ2hDLE1BQU1EO0lBQ1IsT0FBTyxJQUFJQSxRQUFRQyxNQUFNLEtBQUssYUFBYTtRQUN6QyxPQUFPRCxRQUFRTCxLQUFLO0lBQ3RCLE9BQU8sSUFBSUssUUFBUUMsTUFBTSxLQUFLLFlBQVk7UUFDeEMsTUFBTUQsUUFBUUUsTUFBTTtJQUN0QixPQUFPO1FBQ0xGLFFBQVFDLE1BQU0sR0FBRztRQUNqQkQsUUFBUUYsSUFBSSxDQUNWLENBQUNLO1lBQ0NILFFBQVFDLE1BQU0sR0FBRztZQUNqQkQsUUFBUUwsS0FBSyxHQUFHUTtRQUNsQixHQUNBLENBQUNDO1lBQ0NKLFFBQVFDLE1BQU0sR0FBRztZQUNqQkQsUUFBUUUsTUFBTSxHQUFHRTtRQUNuQjtRQUVGLE1BQU1KO0lBQ1I7QUFDRjtBQUNBLFNBQVNLLGFBQWFDLElBQUksRUFBRWpCLE9BQU87SUFDakMsTUFBTUMsUUFBUUYsU0FBU0M7SUFDdkIsTUFBTSxDQUFDLENBQUNrQixrQkFBa0JDLGtCQUFrQkMsZ0JBQWdCLEVBQUVDLFNBQVMsR0FBRzdCLGlEQUFVQSxDQUNsRixDQUFDOEI7UUFDQyxNQUFNQyxZQUFZdEIsTUFBTXVCLEdBQUcsQ0FBQ1A7UUFDNUIsSUFBSVEsT0FBT0MsRUFBRSxDQUFDSixJQUFJLENBQUMsRUFBRSxFQUFFQyxjQUFjRCxJQUFJLENBQUMsRUFBRSxLQUFLckIsU0FBU3FCLElBQUksQ0FBQyxFQUFFLEtBQUtMLE1BQU07WUFDMUUsT0FBT0s7UUFDVDtRQUNBLE9BQU87WUFBQ0M7WUFBV3RCO1lBQU9nQjtTQUFLO0lBQ2pDLEdBQ0EsS0FBSyxHQUNMLElBQU07WUFBQ2hCLE1BQU11QixHQUFHLENBQUNQO1lBQU9oQjtZQUFPZ0I7U0FBSztJQUV0QyxJQUFJWCxRQUFRWTtJQUNaLElBQUlDLHFCQUFxQmxCLFNBQVNtQixvQkFBb0JILE1BQU07UUFDMURJO1FBQ0FmLFFBQVFMLE1BQU11QixHQUFHLENBQUNQO0lBQ3BCO0lBQ0EsTUFBTVUsUUFBUTNCLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVEyQixLQUFLO0lBQ3REbEMsZ0RBQVNBLENBQUM7UUFDUixNQUFNbUMsUUFBUTNCLE1BQU00QixHQUFHLENBQUNaLE1BQU07WUFDNUIsSUFBSSxPQUFPVSxVQUFVLFVBQVU7Z0JBQzdCRyxXQUFXVCxVQUFVTTtnQkFDckI7WUFDRjtZQUNBTjtRQUNGO1FBQ0FBO1FBQ0EsT0FBT087SUFDVCxHQUFHO1FBQUMzQjtRQUFPZ0I7UUFBTVU7S0FBTTtJQUN2QmpDLG9EQUFhQSxDQUFDWTtJQUNkLE9BQU9DLGNBQWNELFNBQVNJLElBQUlKLFNBQVNBO0FBQzdDO0FBRUEsU0FBU3lCLFdBQVdkLElBQUksRUFBRWpCLE9BQU87SUFDL0IsTUFBTUMsUUFBUUYsU0FBU0M7SUFDdkIsTUFBTWdDLFVBQVVyQyxrREFBV0EsQ0FDekIsQ0FBQyxHQUFHc0M7UUFDRixJQUFJLENBQUMsTUFBZSxHQUFHLENBQW9CLEdBQUcsS0FBSyxPQUFPLGdCQUFnQixDQUFFLFlBQVdoQixJQUFHLEdBQUk7WUFDNUYsTUFBTSxJQUFJbUIsTUFBTTtRQUNsQjtRQUNBLE9BQU9uQyxNQUFNb0MsR0FBRyxDQUFDcEIsU0FBU2dCO0lBQzVCLEdBQ0E7UUFBQ2hDO1FBQU9nQjtLQUFLO0lBRWYsT0FBT2U7QUFDVDtBQUVBLFNBQVNNLFFBQVFyQixJQUFJLEVBQUVqQixPQUFPO0lBQzVCLE9BQU87UUFDTGdCLGFBQWFDLE1BQU1qQjtRQUNuQix1RUFBdUU7UUFDdkUrQixXQUFXZCxNQUFNakI7S0FDbEI7QUFDSDtBQUVpRSIsInNvdXJjZXMiOlsid2VicGFjazovL2hhd2EtZG9jcy8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vam90YWlAMi42LjFfQHR5cGVzK3JlYWN0QDE4LjIuNDdfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9qb3RhaS9lc20vcmVhY3QubWpzP2MwM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0IFJlYWN0RXhwb3J0cywgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VSZWYsIGNyZWF0ZUVsZW1lbnQsIHVzZVJlZHVjZXIsIHVzZUVmZmVjdCwgdXNlRGVidWdWYWx1ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXREZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlIH0gZnJvbSAnam90YWkvdmFuaWxsYSc7XG5cbmNvbnN0IFN0b3JlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodm9pZCAwKTtcbmNvbnN0IHVzZVN0b3JlID0gKG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VDb250ZXh0KFN0b3JlQ29udGV4dCk7XG4gIHJldHVybiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5zdG9yZSkgfHwgc3RvcmUgfHwgZ2V0RGVmYXVsdFN0b3JlKCk7XG59O1xuY29uc3QgUHJvdmlkZXIgPSAoe1xuICBjaGlsZHJlbixcbiAgc3RvcmVcbn0pID0+IHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VSZWYoKTtcbiAgaWYgKCFzdG9yZSAmJiAhc3RvcmVSZWYuY3VycmVudCkge1xuICAgIHN0b3JlUmVmLmN1cnJlbnQgPSBjcmVhdGVTdG9yZSgpO1xuICB9XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFxuICAgIFN0b3JlQ29udGV4dC5Qcm92aWRlcixcbiAgICB7XG4gICAgICB2YWx1ZTogc3RvcmUgfHwgc3RvcmVSZWYuY3VycmVudFxuICAgIH0sXG4gICAgY2hpbGRyZW5cbiAgKTtcbn07XG5cbmNvbnN0IGlzUHJvbWlzZUxpa2UgPSAoeCkgPT4gdHlwZW9mICh4ID09IG51bGwgPyB2b2lkIDAgOiB4LnRoZW4pID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCB1c2UgPSBSZWFjdEV4cG9ydHMudXNlIHx8ICgocHJvbWlzZSkgPT4ge1xuICBpZiAocHJvbWlzZS5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfSBlbHNlIGlmIChwcm9taXNlLnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIikge1xuICAgIHJldHVybiBwcm9taXNlLnZhbHVlO1xuICB9IGVsc2UgaWYgKHByb21pc2Uuc3RhdHVzID09PSBcInJlamVjdGVkXCIpIHtcbiAgICB0aHJvdyBwcm9taXNlLnJlYXNvbjtcbiAgfSBlbHNlIHtcbiAgICBwcm9taXNlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgIHByb21pc2UudGhlbihcbiAgICAgICh2KSA9PiB7XG4gICAgICAgIHByb21pc2Uuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHY7XG4gICAgICB9LFxuICAgICAgKGUpID0+IHtcbiAgICAgICAgcHJvbWlzZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgIHByb21pc2UucmVhc29uID0gZTtcbiAgICAgIH1cbiAgICApO1xuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn0pO1xuZnVuY3Rpb24gdXNlQXRvbVZhbHVlKGF0b20sIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZShvcHRpb25zKTtcbiAgY29uc3QgW1t2YWx1ZUZyb21SZWR1Y2VyLCBzdG9yZUZyb21SZWR1Y2VyLCBhdG9tRnJvbVJlZHVjZXJdLCByZXJlbmRlcl0gPSB1c2VSZWR1Y2VyKFxuICAgIChwcmV2KSA9PiB7XG4gICAgICBjb25zdCBuZXh0VmFsdWUgPSBzdG9yZS5nZXQoYXRvbSk7XG4gICAgICBpZiAoT2JqZWN0LmlzKHByZXZbMF0sIG5leHRWYWx1ZSkgJiYgcHJldlsxXSA9PT0gc3RvcmUgJiYgcHJldlsyXSA9PT0gYXRvbSkge1xuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbbmV4dFZhbHVlLCBzdG9yZSwgYXRvbV07XG4gICAgfSxcbiAgICB2b2lkIDAsXG4gICAgKCkgPT4gW3N0b3JlLmdldChhdG9tKSwgc3RvcmUsIGF0b21dXG4gICk7XG4gIGxldCB2YWx1ZSA9IHZhbHVlRnJvbVJlZHVjZXI7XG4gIGlmIChzdG9yZUZyb21SZWR1Y2VyICE9PSBzdG9yZSB8fCBhdG9tRnJvbVJlZHVjZXIgIT09IGF0b20pIHtcbiAgICByZXJlbmRlcigpO1xuICAgIHZhbHVlID0gc3RvcmUuZ2V0KGF0b20pO1xuICB9XG4gIGNvbnN0IGRlbGF5ID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5kZWxheTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YihhdG9tLCAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGRlbGF5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHNldFRpbWVvdXQocmVyZW5kZXIsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVyZW5kZXIoKTtcbiAgICB9KTtcbiAgICByZXJlbmRlcigpO1xuICAgIHJldHVybiB1bnN1YjtcbiAgfSwgW3N0b3JlLCBhdG9tLCBkZWxheV0pO1xuICB1c2VEZWJ1Z1ZhbHVlKHZhbHVlKTtcbiAgcmV0dXJuIGlzUHJvbWlzZUxpa2UodmFsdWUpID8gdXNlKHZhbHVlKSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1c2VTZXRBdG9tKGF0b20sIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZShvcHRpb25zKTtcbiAgY29uc3Qgc2V0QXRvbSA9IHVzZUNhbGxiYWNrKFxuICAgICguLi5hcmdzKSA9PiB7XG4gICAgICBpZiAoKGltcG9ydC5tZXRhLmVudiA/IGltcG9ydC5tZXRhLmVudi5NT0RFIDogdm9pZCAwKSAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIShcIndyaXRlXCIgaW4gYXRvbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IHdyaXRhYmxlIGF0b21cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RvcmUuc2V0KGF0b20sIC4uLmFyZ3MpO1xuICAgIH0sXG4gICAgW3N0b3JlLCBhdG9tXVxuICApO1xuICByZXR1cm4gc2V0QXRvbTtcbn1cblxuZnVuY3Rpb24gdXNlQXRvbShhdG9tLCBvcHRpb25zKSB7XG4gIHJldHVybiBbXG4gICAgdXNlQXRvbVZhbHVlKGF0b20sIG9wdGlvbnMpLFxuICAgIC8vIFdlIGRvIHdyb25nIHR5cGUgYXNzZXJ0aW9uIGhlcmUsIHdoaWNoIHJlc3VsdHMgaW4gdGhyb3dpbmcgYW4gZXJyb3IuXG4gICAgdXNlU2V0QXRvbShhdG9tLCBvcHRpb25zKVxuICBdO1xufVxuXG5leHBvcnQgeyBQcm92aWRlciwgdXNlQXRvbSwgdXNlQXRvbVZhbHVlLCB1c2VTZXRBdG9tLCB1c2VTdG9yZSB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0RXhwb3J0cyIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlUmVmIiwiY3JlYXRlRWxlbWVudCIsInVzZVJlZHVjZXIiLCJ1c2VFZmZlY3QiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlQ2FsbGJhY2siLCJnZXREZWZhdWx0U3RvcmUiLCJjcmVhdGVTdG9yZSIsIlN0b3JlQ29udGV4dCIsInVzZVN0b3JlIiwib3B0aW9ucyIsInN0b3JlIiwiUHJvdmlkZXIiLCJjaGlsZHJlbiIsInN0b3JlUmVmIiwiY3VycmVudCIsInZhbHVlIiwiaXNQcm9taXNlTGlrZSIsIngiLCJ0aGVuIiwidXNlIiwicHJvbWlzZSIsInN0YXR1cyIsInJlYXNvbiIsInYiLCJlIiwidXNlQXRvbVZhbHVlIiwiYXRvbSIsInZhbHVlRnJvbVJlZHVjZXIiLCJzdG9yZUZyb21SZWR1Y2VyIiwiYXRvbUZyb21SZWR1Y2VyIiwicmVyZW5kZXIiLCJwcmV2IiwibmV4dFZhbHVlIiwiZ2V0IiwiT2JqZWN0IiwiaXMiLCJkZWxheSIsInVuc3ViIiwic3ViIiwic2V0VGltZW91dCIsInVzZVNldEF0b20iLCJzZXRBdG9tIiwiYXJncyIsImVudiIsIk1PREUiLCJFcnJvciIsInNldCIsInVzZUF0b20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/react.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla.mjs":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla.mjs ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atom: () => (/* binding */ atom),\n/* harmony export */   createStore: () => (/* binding */ createStore),\n/* harmony export */   getDefaultStore: () => (/* binding */ getDefaultStore)\n/* harmony export */ });\nlet keyCount = 0;\nfunction atom(read, write) {\n    const key = `atom${++keyCount}`;\n    const config = {\n        toString: ()=>key\n    };\n    if (typeof read === \"function\") {\n        config.read = read;\n    } else {\n        config.init = read;\n        config.read = function(get) {\n            return get(this);\n        };\n        config.write = function(get, set, arg) {\n            return set(this, typeof arg === \"function\" ? arg(get(this)) : arg);\n        };\n    }\n    if (write) {\n        config.write = write;\n    }\n    return config;\n}\nconst hasInitialValue = (atom)=>\"init\" in atom;\nconst isActuallyWritableAtom = (atom)=>!!atom.write;\nconst cancelPromiseMap = /* @__PURE__ */ new WeakMap();\nconst registerCancelPromise = (promise, cancel)=>{\n    cancelPromiseMap.set(promise, cancel);\n    promise.catch(()=>{}).finally(()=>cancelPromiseMap.delete(promise));\n};\nconst cancelPromise = (promise, next)=>{\n    const cancel = cancelPromiseMap.get(promise);\n    if (cancel) {\n        cancelPromiseMap.delete(promise);\n        cancel(next);\n    }\n};\nconst resolvePromise = (promise, value)=>{\n    promise.status = \"fulfilled\";\n    promise.value = value;\n};\nconst rejectPromise = (promise, e)=>{\n    promise.status = \"rejected\";\n    promise.reason = e;\n};\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nconst isEqualAtomValue = (a, b)=>!!a && \"v\" in a && \"v\" in b && Object.is(a.v, b.v);\nconst isEqualAtomError = (a, b)=>!!a && \"e\" in a && \"e\" in b && Object.is(a.e, b.e);\nconst hasPromiseAtomValue = (a)=>!!a && \"v\" in a && a.v instanceof Promise;\nconst isEqualPromiseAtomValue = (a, b)=>\"v\" in a && \"v\" in b && a.v.orig && a.v.orig === b.v.orig;\nconst returnAtomValue = (atomState)=>{\n    if (\"e\" in atomState) {\n        throw atomState.e;\n    }\n    return atomState.v;\n};\nconst createStore = ()=>{\n    const atomStateMap = /* @__PURE__ */ new WeakMap();\n    const mountedMap = /* @__PURE__ */ new WeakMap();\n    const pendingMap = /* @__PURE__ */ new Map();\n    let storeListenersRev2;\n    let mountedAtoms;\n    if (( false ? 0 : void 0) !== \"production\") {\n        storeListenersRev2 = /* @__PURE__ */ new Set();\n        mountedAtoms = /* @__PURE__ */ new Set();\n    }\n    const getAtomState = (atom)=>atomStateMap.get(atom);\n    const setAtomState = (atom, atomState)=>{\n        if (( false ? 0 : void 0) !== \"production\") {\n            Object.freeze(atomState);\n        }\n        const prevAtomState = atomStateMap.get(atom);\n        atomStateMap.set(atom, atomState);\n        if (!pendingMap.has(atom)) {\n            pendingMap.set(atom, prevAtomState);\n        }\n        if (hasPromiseAtomValue(prevAtomState)) {\n            const next = \"v\" in atomState ? atomState.v instanceof Promise ? atomState.v : Promise.resolve(atomState.v) : Promise.reject(atomState.e);\n            if (prevAtomState.v !== next) {\n                cancelPromise(prevAtomState.v, next);\n            }\n        }\n    };\n    const updateDependencies = (atom, nextAtomState, nextDependencies)=>{\n        const dependencies = /* @__PURE__ */ new Map();\n        let changed = false;\n        nextDependencies.forEach((aState, a)=>{\n            if (!aState && a === atom) {\n                aState = nextAtomState;\n            }\n            if (aState) {\n                dependencies.set(a, aState);\n                if (nextAtomState.d.get(a) !== aState) {\n                    changed = true;\n                }\n            } else if (( false ? 0 : void 0) !== \"production\") {\n                console.warn(\"[Bug] atom state not found\");\n            }\n        });\n        if (changed || nextAtomState.d.size !== dependencies.size) {\n            nextAtomState.d = dependencies;\n        }\n    };\n    const setAtomValue = (atom, value, nextDependencies)=>{\n        const prevAtomState = getAtomState(atom);\n        const nextAtomState = {\n            d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),\n            v: value\n        };\n        if (nextDependencies) {\n            updateDependencies(atom, nextAtomState, nextDependencies);\n        }\n        if (isEqualAtomValue(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {\n            return prevAtomState;\n        }\n        if (hasPromiseAtomValue(prevAtomState) && hasPromiseAtomValue(nextAtomState) && isEqualPromiseAtomValue(prevAtomState, nextAtomState)) {\n            if (prevAtomState.d === nextAtomState.d) {\n                return prevAtomState;\n            } else {\n                nextAtomState.v = prevAtomState.v;\n            }\n        }\n        setAtomState(atom, nextAtomState);\n        return nextAtomState;\n    };\n    const setAtomValueOrPromise = (atom, valueOrPromise, nextDependencies, abortPromise)=>{\n        if (isPromiseLike(valueOrPromise)) {\n            let continuePromise;\n            const updatePromiseDependencies = ()=>{\n                const prevAtomState = getAtomState(atom);\n                if (!hasPromiseAtomValue(prevAtomState) || prevAtomState.v !== promise) {\n                    return;\n                }\n                const nextAtomState = setAtomValue(atom, promise, nextDependencies);\n                if (mountedMap.has(atom) && prevAtomState.d !== nextAtomState.d) {\n                    mountDependencies(atom, nextAtomState, prevAtomState.d);\n                }\n            };\n            const promise = new Promise((resolve, reject)=>{\n                let settled = false;\n                valueOrPromise.then((v)=>{\n                    if (!settled) {\n                        settled = true;\n                        resolvePromise(promise, v);\n                        resolve(v);\n                        updatePromiseDependencies();\n                    }\n                }, (e)=>{\n                    if (!settled) {\n                        settled = true;\n                        rejectPromise(promise, e);\n                        reject(e);\n                        updatePromiseDependencies();\n                    }\n                });\n                continuePromise = (next)=>{\n                    if (!settled) {\n                        settled = true;\n                        next.then((v)=>resolvePromise(promise, v), (e)=>rejectPromise(promise, e));\n                        resolve(next);\n                    }\n                };\n            });\n            promise.orig = valueOrPromise;\n            promise.status = \"pending\";\n            registerCancelPromise(promise, (next)=>{\n                if (next) {\n                    continuePromise(next);\n                }\n                abortPromise == null ? void 0 : abortPromise();\n            });\n            return setAtomValue(atom, promise, nextDependencies);\n        }\n        return setAtomValue(atom, valueOrPromise, nextDependencies);\n    };\n    const setAtomError = (atom, error, nextDependencies)=>{\n        const prevAtomState = getAtomState(atom);\n        const nextAtomState = {\n            d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),\n            e: error\n        };\n        if (nextDependencies) {\n            updateDependencies(atom, nextAtomState, nextDependencies);\n        }\n        if (isEqualAtomError(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {\n            return prevAtomState;\n        }\n        setAtomState(atom, nextAtomState);\n        return nextAtomState;\n    };\n    const readAtomState = (atom, force)=>{\n        const atomState = getAtomState(atom);\n        if (!force && atomState) {\n            if (mountedMap.has(atom)) {\n                return atomState;\n            }\n            if (Array.from(atomState.d).every(([a, s])=>{\n                if (a === atom) {\n                    return true;\n                }\n                const aState = readAtomState(a);\n                return aState === s || isEqualAtomValue(aState, s);\n            })) {\n                return atomState;\n            }\n        }\n        const nextDependencies = /* @__PURE__ */ new Map();\n        let isSync = true;\n        const getter = (a)=>{\n            if (a === atom) {\n                const aState2 = getAtomState(a);\n                if (aState2) {\n                    nextDependencies.set(a, aState2);\n                    return returnAtomValue(aState2);\n                }\n                if (hasInitialValue(a)) {\n                    nextDependencies.set(a, void 0);\n                    return a.init;\n                }\n                throw new Error(\"no atom init\");\n            }\n            const aState = readAtomState(a);\n            nextDependencies.set(a, aState);\n            return returnAtomValue(aState);\n        };\n        let controller;\n        let setSelf;\n        const options = {\n            get signal () {\n                if (!controller) {\n                    controller = new AbortController();\n                }\n                return controller.signal;\n            },\n            get setSelf () {\n                if (( false ? 0 : void 0) !== \"production\" && !isActuallyWritableAtom(atom)) {\n                    console.warn(\"setSelf function cannot be used with read-only atom\");\n                }\n                if (!setSelf && isActuallyWritableAtom(atom)) {\n                    setSelf = (...args)=>{\n                        if (( false ? 0 : void 0) !== \"production\" && isSync) {\n                            console.warn(\"setSelf function cannot be called in sync\");\n                        }\n                        if (!isSync) {\n                            return writeAtom(atom, ...args);\n                        }\n                    };\n                }\n                return setSelf;\n            }\n        };\n        try {\n            const valueOrPromise = atom.read(getter, options);\n            return setAtomValueOrPromise(atom, valueOrPromise, nextDependencies, ()=>controller == null ? void 0 : controller.abort());\n        } catch (error) {\n            return setAtomError(atom, error, nextDependencies);\n        } finally{\n            isSync = false;\n        }\n    };\n    const readAtom = (atom)=>returnAtomValue(readAtomState(atom));\n    const addAtom = (atom)=>{\n        let mounted = mountedMap.get(atom);\n        if (!mounted) {\n            mounted = mountAtom(atom);\n        }\n        return mounted;\n    };\n    const canUnmountAtom = (atom, mounted)=>!mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));\n    const delAtom = (atom)=>{\n        const mounted = mountedMap.get(atom);\n        if (mounted && canUnmountAtom(atom, mounted)) {\n            unmountAtom(atom);\n        }\n    };\n    const recomputeDependents = (atom)=>{\n        const dependencyMap = /* @__PURE__ */ new Map();\n        const dirtyMap = /* @__PURE__ */ new WeakMap();\n        const getDependents = (a)=>{\n            var _a;\n            const dependents = new Set((_a = mountedMap.get(a)) == null ? void 0 : _a.t);\n            pendingMap.forEach((_, pendingAtom)=>{\n                var _a2;\n                if ((_a2 = getAtomState(pendingAtom)) == null ? void 0 : _a2.d.has(a)) {\n                    dependents.add(pendingAtom);\n                }\n            });\n            return dependents;\n        };\n        const loop1 = (a)=>{\n            getDependents(a).forEach((dependent)=>{\n                if (dependent !== a) {\n                    dependencyMap.set(dependent, (dependencyMap.get(dependent) || /* @__PURE__ */ new Set()).add(a));\n                    dirtyMap.set(dependent, (dirtyMap.get(dependent) || 0) + 1);\n                    loop1(dependent);\n                }\n            });\n        };\n        loop1(atom);\n        const loop2 = (a)=>{\n            getDependents(a).forEach((dependent)=>{\n                var _a;\n                if (dependent !== a) {\n                    let dirtyCount = dirtyMap.get(dependent);\n                    if (dirtyCount) {\n                        dirtyMap.set(dependent, --dirtyCount);\n                    }\n                    if (!dirtyCount) {\n                        let isChanged = !!((_a = dependencyMap.get(dependent)) == null ? void 0 : _a.size);\n                        if (isChanged) {\n                            const prevAtomState = getAtomState(dependent);\n                            const nextAtomState = readAtomState(dependent, true);\n                            isChanged = !isEqualAtomValue(prevAtomState, nextAtomState);\n                        }\n                        if (!isChanged) {\n                            dependencyMap.forEach((s)=>s.delete(dependent));\n                        }\n                    }\n                    loop2(dependent);\n                }\n            });\n        };\n        loop2(atom);\n    };\n    const writeAtomState = (atom, ...args)=>{\n        let isSync = true;\n        const getter = (a)=>returnAtomValue(readAtomState(a));\n        const setter = (a, ...args2)=>{\n            let r;\n            if (a === atom) {\n                if (!hasInitialValue(a)) {\n                    throw new Error(\"atom not writable\");\n                }\n                const prevAtomState = getAtomState(a);\n                const nextAtomState = setAtomValueOrPromise(a, args2[0]);\n                if (!isEqualAtomValue(prevAtomState, nextAtomState)) {\n                    recomputeDependents(a);\n                }\n            } else {\n                r = writeAtomState(a, ...args2);\n            }\n            if (!isSync) {\n                const flushed = flushPending();\n                if (( false ? 0 : void 0) !== \"production\") {\n                    storeListenersRev2.forEach((l)=>l({\n                            type: \"async-write\",\n                            flushed\n                        }));\n                }\n            }\n            return r;\n        };\n        const result = atom.write(getter, setter, ...args);\n        isSync = false;\n        return result;\n    };\n    const writeAtom = (atom, ...args)=>{\n        const result = writeAtomState(atom, ...args);\n        const flushed = flushPending();\n        if (( false ? 0 : void 0) !== \"production\") {\n            storeListenersRev2.forEach((l)=>l({\n                    type: \"write\",\n                    flushed\n                }));\n        }\n        return result;\n    };\n    const mountAtom = (atom, initialDependent, onMountQueue)=>{\n        var _a;\n        const queue = onMountQueue || [];\n        (_a = getAtomState(atom)) == null ? void 0 : _a.d.forEach((_, a)=>{\n            const aMounted = mountedMap.get(a);\n            if (aMounted) {\n                aMounted.t.add(atom);\n            } else {\n                if (a !== atom) {\n                    mountAtom(a, atom, queue);\n                }\n            }\n        });\n        readAtomState(atom);\n        const mounted = {\n            t: new Set(initialDependent && [\n                initialDependent\n            ]),\n            l: /* @__PURE__ */ new Set()\n        };\n        mountedMap.set(atom, mounted);\n        if (( false ? 0 : void 0) !== \"production\") {\n            mountedAtoms.add(atom);\n        }\n        if (isActuallyWritableAtom(atom) && atom.onMount) {\n            const { onMount } = atom;\n            queue.push(()=>{\n                const onUnmount = onMount((...args)=>writeAtom(atom, ...args));\n                if (onUnmount) {\n                    mounted.u = onUnmount;\n                }\n            });\n        }\n        if (!onMountQueue) {\n            queue.forEach((f)=>f());\n        }\n        return mounted;\n    };\n    const unmountAtom = (atom)=>{\n        var _a;\n        const onUnmount = (_a = mountedMap.get(atom)) == null ? void 0 : _a.u;\n        if (onUnmount) {\n            onUnmount();\n        }\n        mountedMap.delete(atom);\n        if (( false ? 0 : void 0) !== \"production\") {\n            mountedAtoms.delete(atom);\n        }\n        const atomState = getAtomState(atom);\n        if (atomState) {\n            if (hasPromiseAtomValue(atomState)) {\n                cancelPromise(atomState.v);\n            }\n            atomState.d.forEach((_, a)=>{\n                if (a !== atom) {\n                    const mounted = mountedMap.get(a);\n                    if (mounted) {\n                        mounted.t.delete(atom);\n                        if (canUnmountAtom(a, mounted)) {\n                            unmountAtom(a);\n                        }\n                    }\n                }\n            });\n        } else if (( false ? 0 : void 0) !== \"production\") {\n            console.warn(\"[Bug] could not find atom state to unmount\", atom);\n        }\n    };\n    const mountDependencies = (atom, atomState, prevDependencies)=>{\n        const depSet = new Set(atomState.d.keys());\n        prevDependencies == null ? void 0 : prevDependencies.forEach((_, a)=>{\n            if (depSet.has(a)) {\n                depSet.delete(a);\n                return;\n            }\n            const mounted = mountedMap.get(a);\n            if (mounted) {\n                mounted.t.delete(atom);\n                if (canUnmountAtom(a, mounted)) {\n                    unmountAtom(a);\n                }\n            }\n        });\n        depSet.forEach((a)=>{\n            const mounted = mountedMap.get(a);\n            if (mounted) {\n                mounted.t.add(atom);\n            } else if (mountedMap.has(atom)) {\n                mountAtom(a, atom);\n            }\n        });\n    };\n    const flushPending = ()=>{\n        let flushed;\n        if (( false ? 0 : void 0) !== \"production\") {\n            flushed = /* @__PURE__ */ new Set();\n        }\n        while(pendingMap.size){\n            const pending = Array.from(pendingMap);\n            pendingMap.clear();\n            pending.forEach(([atom, prevAtomState])=>{\n                const atomState = getAtomState(atom);\n                if (atomState) {\n                    const mounted = mountedMap.get(atom);\n                    if (mounted && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {\n                        mountDependencies(atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);\n                    }\n                    if (mounted && !// Maybe we could `mountDependencies` in `setAtomState`?\n                    (!hasPromiseAtomValue(prevAtomState) && (isEqualAtomValue(prevAtomState, atomState) || isEqualAtomError(prevAtomState, atomState)))) {\n                        mounted.l.forEach((listener)=>listener());\n                        if (( false ? 0 : void 0) !== \"production\") {\n                            flushed.add(atom);\n                        }\n                    }\n                } else if (( false ? 0 : void 0) !== \"production\") {\n                    console.warn(\"[Bug] no atom state to flush\");\n                }\n            });\n        }\n        if (( false ? 0 : void 0) !== \"production\") {\n            return flushed;\n        }\n    };\n    const subscribeAtom = (atom, listener)=>{\n        const mounted = addAtom(atom);\n        const flushed = flushPending();\n        const listeners = mounted.l;\n        listeners.add(listener);\n        if (( false ? 0 : void 0) !== \"production\") {\n            storeListenersRev2.forEach((l)=>l({\n                    type: \"sub\",\n                    flushed\n                }));\n        }\n        return ()=>{\n            listeners.delete(listener);\n            delAtom(atom);\n            if (( false ? 0 : void 0) !== \"production\") {\n                storeListenersRev2.forEach((l)=>l({\n                        type: \"unsub\"\n                    }));\n            }\n        };\n    };\n    if (( false ? 0 : void 0) !== \"production\") {\n        return {\n            get: readAtom,\n            set: writeAtom,\n            sub: subscribeAtom,\n            // store dev methods (these are tentative and subject to change without notice)\n            dev_subscribe_store: (l, rev)=>{\n                if (rev !== 2) {\n                    throw new Error(\"The current StoreListener revision is 2.\");\n                }\n                storeListenersRev2.add(l);\n                return ()=>{\n                    storeListenersRev2.delete(l);\n                };\n            },\n            dev_get_mounted_atoms: ()=>mountedAtoms.values(),\n            dev_get_atom_state: (a)=>atomStateMap.get(a),\n            dev_get_mounted: (a)=>mountedMap.get(a),\n            dev_restore_atoms: (values)=>{\n                for (const [atom, valueOrPromise] of values){\n                    if (hasInitialValue(atom)) {\n                        setAtomValueOrPromise(atom, valueOrPromise);\n                        recomputeDependents(atom);\n                    }\n                }\n                const flushed = flushPending();\n                storeListenersRev2.forEach((l)=>l({\n                        type: \"restore\",\n                        flushed\n                    }));\n            }\n        };\n    }\n    return {\n        get: readAtom,\n        set: writeAtom,\n        sub: subscribeAtom\n    };\n};\nlet defaultStore;\nif (( false ? 0 : void 0) !== \"production\") {\n    if (typeof globalThis.__NUMBER_OF_JOTAI_INSTANCES__ === \"number\") {\n        ++globalThis.__NUMBER_OF_JOTAI_INSTANCES__;\n    } else {\n        globalThis.__NUMBER_OF_JOTAI_INSTANCES__ = 1;\n    }\n}\nconst getDefaultStore = ()=>{\n    if (!defaultStore) {\n        if (( false ? 0 : void 0) !== \"production\" && globalThis.__NUMBER_OF_JOTAI_INSTANCES__ !== 1) {\n            console.warn(\"Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044\");\n        }\n        defaultStore = createStore();\n    }\n    return defaultStore;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla/utils.mjs":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla/utils.mjs ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RESET: () => (/* binding */ RESET),\n/* harmony export */   atomFamily: () => (/* binding */ atomFamily),\n/* harmony export */   atomWithDefault: () => (/* binding */ atomWithDefault),\n/* harmony export */   atomWithObservable: () => (/* binding */ atomWithObservable),\n/* harmony export */   atomWithReducer: () => (/* binding */ atomWithReducer),\n/* harmony export */   atomWithReset: () => (/* binding */ atomWithReset),\n/* harmony export */   atomWithStorage: () => (/* binding */ atomWithStorage),\n/* harmony export */   createJSONStorage: () => (/* binding */ createJSONStorage),\n/* harmony export */   freezeAtom: () => (/* binding */ freezeAtom),\n/* harmony export */   freezeAtomCreator: () => (/* binding */ freezeAtomCreator),\n/* harmony export */   loadable: () => (/* binding */ loadable),\n/* harmony export */   selectAtom: () => (/* binding */ selectAtom),\n/* harmony export */   splitAtom: () => (/* binding */ splitAtom),\n/* harmony export */   unwrap: () => (/* binding */ unwrap)\n/* harmony export */ });\n/* harmony import */ var jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jotai/vanilla */ \"(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla.mjs\");\n\nconst RESET = Symbol(( false ? 0 : void 0) !== \"production\" ? \"RESET\" : \"\");\nfunction atomWithReset(initialValue) {\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(initialValue, (get, set, update)=>{\n        const nextValue = typeof update === \"function\" ? update(get(anAtom)) : update;\n        set(anAtom, nextValue === RESET ? initialValue : nextValue);\n    });\n    return anAtom;\n}\nfunction atomWithReducer(initialValue, reducer) {\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(initialValue, (get, set, action)=>set(anAtom, reducer(get(anAtom), action)));\n    return anAtom;\n}\nfunction atomFamily(initializeAtom, areEqual) {\n    let shouldRemove = null;\n    const atoms = /* @__PURE__ */ new Map();\n    const createAtom = (param)=>{\n        let item;\n        if (areEqual === void 0) {\n            item = atoms.get(param);\n        } else {\n            for (const [key, value] of atoms){\n                if (areEqual(key, param)) {\n                    item = value;\n                    break;\n                }\n            }\n        }\n        if (item !== void 0) {\n            if (shouldRemove == null ? void 0 : shouldRemove(item[1], param)) {\n                createAtom.remove(param);\n            } else {\n                return item[0];\n            }\n        }\n        const newAtom = initializeAtom(param);\n        atoms.set(param, [\n            newAtom,\n            Date.now()\n        ]);\n        return newAtom;\n    };\n    createAtom.remove = (param)=>{\n        if (areEqual === void 0) {\n            atoms.delete(param);\n        } else {\n            for (const [key] of atoms){\n                if (areEqual(key, param)) {\n                    atoms.delete(key);\n                    break;\n                }\n            }\n        }\n    };\n    createAtom.setShouldRemove = (fn)=>{\n        shouldRemove = fn;\n        if (!shouldRemove) return;\n        for (const [key, value] of atoms){\n            if (shouldRemove(value[1], key)) {\n                atoms.delete(key);\n            }\n        }\n    };\n    return createAtom;\n}\nconst getCached$2 = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1$4 = /* @__PURE__ */ new WeakMap();\nconst memo3 = (create, dep1, dep2, dep3)=>{\n    const cache2 = getCached$2(()=>/* @__PURE__ */ new WeakMap(), cache1$4, dep1);\n    const cache3 = getCached$2(()=>/* @__PURE__ */ new WeakMap(), cache2, dep2);\n    return getCached$2(create, cache3, dep3);\n};\nfunction selectAtom(anAtom, selector, equalityFn = Object.is) {\n    return memo3(()=>{\n        const EMPTY = Symbol();\n        const selectValue = ([value, prevSlice])=>{\n            if (prevSlice === EMPTY) {\n                return selector(value);\n            }\n            const slice = selector(value, prevSlice);\n            return equalityFn(prevSlice, slice) ? prevSlice : slice;\n        };\n        const derivedAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const prev = get(derivedAtom);\n            const value = get(anAtom);\n            if (value instanceof Promise || prev instanceof Promise) {\n                return Promise.all([\n                    value,\n                    prev\n                ]).then(selectValue);\n            }\n            return selectValue([\n                value,\n                prev\n            ]);\n        });\n        derivedAtom.init = EMPTY;\n        return derivedAtom;\n    }, anAtom, selector, equalityFn);\n}\nconst cache1$3 = /* @__PURE__ */ new WeakMap();\nconst memo1$1 = (create, dep1)=>(cache1$3.has(dep1) ? cache1$3 : cache1$3.set(dep1, create())).get(dep1);\nconst deepFreeze = (obj)=>{\n    if (typeof obj !== \"object\" || obj === null) return;\n    Object.freeze(obj);\n    const propNames = Object.getOwnPropertyNames(obj);\n    for (const name of propNames){\n        const value = obj[name];\n        deepFreeze(value);\n    }\n    return obj;\n};\nfunction freezeAtom(anAtom) {\n    return memo1$1(()=>{\n        const frozenAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>deepFreeze(get(anAtom)), (_get, set, arg)=>set(anAtom, arg));\n        return frozenAtom;\n    }, anAtom);\n}\nfunction freezeAtomCreator(createAtom) {\n    return (...params)=>{\n        const anAtom = createAtom(...params);\n        const origRead = anAtom.read;\n        anAtom.read = function(get, options) {\n            return deepFreeze(origRead.call(this, get, options));\n        };\n        return anAtom;\n    };\n}\nconst getCached$1 = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1$2 = /* @__PURE__ */ new WeakMap();\nconst memo2$1 = (create, dep1, dep2)=>{\n    const cache2 = getCached$1(()=>/* @__PURE__ */ new WeakMap(), cache1$2, dep1);\n    return getCached$1(create, cache2, dep2);\n};\nconst cacheKeyForEmptyKeyExtractor = {};\nconst isWritable = (atom2)=>!!atom2.write;\nconst isFunction = (x)=>typeof x === \"function\";\nfunction splitAtom(arrAtom, keyExtractor) {\n    return memo2$1(()=>{\n        const mappingCache = /* @__PURE__ */ new WeakMap();\n        const getMapping = (arr, prev)=>{\n            let mapping = mappingCache.get(arr);\n            if (mapping) {\n                return mapping;\n            }\n            const prevMapping = prev && mappingCache.get(prev);\n            const atomList = [];\n            const keyList = [];\n            arr.forEach((item, index)=>{\n                const key = keyExtractor ? keyExtractor(item) : index;\n                keyList[index] = key;\n                const cachedAtom = prevMapping && prevMapping.atomList[prevMapping.keyList.indexOf(key)];\n                if (cachedAtom) {\n                    atomList[index] = cachedAtom;\n                    return;\n                }\n                const read = (get)=>{\n                    const prev2 = get(mappingAtom);\n                    const currArr = get(arrAtom);\n                    const mapping2 = getMapping(currArr, prev2 == null ? void 0 : prev2.arr);\n                    const index2 = mapping2.keyList.indexOf(key);\n                    if (index2 < 0 || index2 >= currArr.length) {\n                        const prevItem = arr[getMapping(arr).keyList.indexOf(key)];\n                        if (prevItem) {\n                            return prevItem;\n                        }\n                        throw new Error(\"splitAtom: index out of bounds for read\");\n                    }\n                    return currArr[index2];\n                };\n                const write = (get, set, update)=>{\n                    const prev2 = get(mappingAtom);\n                    const arr2 = get(arrAtom);\n                    const mapping2 = getMapping(arr2, prev2 == null ? void 0 : prev2.arr);\n                    const index2 = mapping2.keyList.indexOf(key);\n                    if (index2 < 0 || index2 >= arr2.length) {\n                        throw new Error(\"splitAtom: index out of bounds for write\");\n                    }\n                    const nextItem = isFunction(update) ? update(arr2[index2]) : update;\n                    if (!Object.is(arr2[index2], nextItem)) {\n                        set(arrAtom, [\n                            ...arr2.slice(0, index2),\n                            nextItem,\n                            ...arr2.slice(index2 + 1)\n                        ]);\n                    }\n                };\n                atomList[index] = isWritable(arrAtom) ? (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(read, write) : (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(read);\n            });\n            if (prevMapping && prevMapping.keyList.length === keyList.length && prevMapping.keyList.every((x, i)=>x === keyList[i])) {\n                mapping = prevMapping;\n            } else {\n                mapping = {\n                    arr,\n                    atomList,\n                    keyList\n                };\n            }\n            mappingCache.set(arr, mapping);\n            return mapping;\n        };\n        const mappingAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const prev = get(mappingAtom);\n            const arr = get(arrAtom);\n            const mapping = getMapping(arr, prev == null ? void 0 : prev.arr);\n            return mapping;\n        });\n        if (( false ? 0 : void 0) !== \"production\") {\n            mappingAtom.debugPrivate = true;\n        }\n        mappingAtom.init = void 0;\n        const splittedAtom = isWritable(arrAtom) ? (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(mappingAtom).atomList, (get, set, action)=>{\n            switch(action.type){\n                case \"remove\":\n                    {\n                        const index = get(splittedAtom).indexOf(action.atom);\n                        if (index >= 0) {\n                            const arr = get(arrAtom);\n                            set(arrAtom, [\n                                ...arr.slice(0, index),\n                                ...arr.slice(index + 1)\n                            ]);\n                        }\n                        break;\n                    }\n                case \"insert\":\n                    {\n                        const index = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n                        if (index >= 0) {\n                            const arr = get(arrAtom);\n                            set(arrAtom, [\n                                ...arr.slice(0, index),\n                                action.value,\n                                ...arr.slice(index)\n                            ]);\n                        }\n                        break;\n                    }\n                case \"move\":\n                    {\n                        const index1 = get(splittedAtom).indexOf(action.atom);\n                        const index2 = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n                        if (index1 >= 0 && index2 >= 0) {\n                            const arr = get(arrAtom);\n                            if (index1 < index2) {\n                                set(arrAtom, [\n                                    ...arr.slice(0, index1),\n                                    ...arr.slice(index1 + 1, index2),\n                                    arr[index1],\n                                    ...arr.slice(index2)\n                                ]);\n                            } else {\n                                set(arrAtom, [\n                                    ...arr.slice(0, index2),\n                                    arr[index1],\n                                    ...arr.slice(index2, index1),\n                                    ...arr.slice(index1 + 1)\n                                ]);\n                            }\n                        }\n                        break;\n                    }\n            }\n        }) : (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(mappingAtom).atomList);\n        return splittedAtom;\n    }, arrAtom, keyExtractor || cacheKeyForEmptyKeyExtractor);\n}\nfunction atomWithDefault(getDefault) {\n    const EMPTY = Symbol();\n    const overwrittenAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(EMPTY);\n    if (( false ? 0 : void 0) !== \"production\") {\n        overwrittenAtom.debugPrivate = true;\n    }\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, options)=>{\n        const overwritten = get(overwrittenAtom);\n        if (overwritten !== EMPTY) {\n            return overwritten;\n        }\n        return getDefault(get, options);\n    }, (get, set, update)=>{\n        if (update === RESET) {\n            set(overwrittenAtom, EMPTY);\n        } else if (typeof update === \"function\") {\n            const prevValue = get(anAtom);\n            set(overwrittenAtom, update(prevValue));\n        } else {\n            set(overwrittenAtom, update);\n        }\n    });\n    return anAtom;\n}\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nfunction createJSONStorage(getStringStorage) {\n    let lastStr;\n    let lastValue;\n    const storage = {\n        getItem: (key, initialValue)=>{\n            var _a, _b;\n            const parse = (str2)=>{\n                str2 = str2 || \"\";\n                if (lastStr !== str2) {\n                    try {\n                        lastValue = JSON.parse(str2);\n                    } catch  {\n                        return initialValue;\n                    }\n                    lastStr = str2;\n                }\n                return lastValue;\n            };\n            const str = (_b = (_a = getStringStorage()) == null ? void 0 : _a.getItem(key)) != null ? _b : null;\n            if (isPromiseLike(str)) {\n                return str.then(parse);\n            }\n            return parse(str);\n        },\n        setItem: (key, newValue)=>{\n            var _a;\n            return (_a = getStringStorage()) == null ? void 0 : _a.setItem(key, JSON.stringify(newValue));\n        },\n        removeItem: (key)=>{\n            var _a;\n            return (_a = getStringStorage()) == null ? void 0 : _a.removeItem(key);\n        }\n    };\n    if (false) {}\n    return storage;\n}\nconst defaultStorage = createJSONStorage(()=> false ? 0 : void 0);\nfunction atomWithStorage(key, initialValue, storage = defaultStorage, options) {\n    const getOnInit = options == null ? void 0 : options.getOnInit;\n    const baseAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(getOnInit ? storage.getItem(key, initialValue) : initialValue);\n    if (( false ? 0 : void 0) !== \"production\") {\n        baseAtom.debugPrivate = true;\n    }\n    baseAtom.onMount = (setAtom)=>{\n        if (!getOnInit) {\n            setAtom(storage.getItem(key, initialValue));\n        }\n        let unsub;\n        if (storage.subscribe) {\n            unsub = storage.subscribe(key, setAtom, initialValue);\n        }\n        return unsub;\n    };\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(baseAtom), (get, set, update)=>{\n        const nextValue = typeof update === \"function\" ? update(get(baseAtom)) : update;\n        if (nextValue === RESET) {\n            set(baseAtom, initialValue);\n            return storage.removeItem(key);\n        }\n        if (nextValue instanceof Promise) {\n            return nextValue.then((resolvedValue)=>{\n                set(baseAtom, resolvedValue);\n                return storage.setItem(key, resolvedValue);\n            });\n        }\n        set(baseAtom, nextValue);\n        return storage.setItem(key, nextValue);\n    });\n    return anAtom;\n}\nfunction atomWithObservable(getObservable, options) {\n    const returnResultData = (result)=>{\n        if (\"e\" in result) {\n            throw result.e;\n        }\n        return result.d;\n    };\n    const observableResultAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n        var _a;\n        let observable = getObservable(get);\n        const itself = (_a = observable[Symbol.observable]) == null ? void 0 : _a.call(observable);\n        if (itself) {\n            observable = itself;\n        }\n        let resolve;\n        const makePending = ()=>new Promise((r)=>{\n                resolve = r;\n            });\n        const initialResult = options && \"initialValue\" in options ? {\n            d: typeof options.initialValue === \"function\" ? options.initialValue() : options.initialValue\n        } : makePending();\n        let setResult;\n        let lastResult;\n        const listener = (result)=>{\n            lastResult = result;\n            resolve == null ? void 0 : resolve(result);\n            setResult == null ? void 0 : setResult(result);\n        };\n        let subscription;\n        let timer;\n        const isNotMounted = ()=>!setResult;\n        const start = ()=>{\n            if (subscription) {\n                clearTimeout(timer);\n                subscription.unsubscribe();\n            }\n            subscription = observable.subscribe({\n                next: (d)=>listener({\n                        d\n                    }),\n                error: (e)=>listener({\n                        e\n                    }),\n                complete: ()=>{}\n            });\n            if (isNotMounted() && (options == null ? void 0 : options.unstable_timeout)) {\n                timer = setTimeout(()=>{\n                    if (subscription) {\n                        subscription.unsubscribe();\n                        subscription = void 0;\n                    }\n                }, options.unstable_timeout);\n            }\n        };\n        start();\n        const resultAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(lastResult || initialResult);\n        if (( false ? 0 : void 0) !== \"production\") {\n            resultAtom.debugPrivate = true;\n        }\n        resultAtom.onMount = (update)=>{\n            setResult = update;\n            if (lastResult) {\n                update(lastResult);\n            }\n            if (subscription) {\n                clearTimeout(timer);\n            } else {\n                start();\n            }\n            return ()=>{\n                setResult = void 0;\n                if (subscription) {\n                    subscription.unsubscribe();\n                    subscription = void 0;\n                }\n            };\n        };\n        return [\n            resultAtom,\n            observable,\n            makePending,\n            start,\n            isNotMounted\n        ];\n    });\n    if (( false ? 0 : void 0) !== \"production\") {\n        observableResultAtom.debugPrivate = true;\n    }\n    const observableAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n        const [resultAtom] = get(observableResultAtom);\n        const result = get(resultAtom);\n        if (result instanceof Promise) {\n            return result.then(returnResultData);\n        }\n        return returnResultData(result);\n    }, (get, set, data)=>{\n        const [resultAtom, observable, makePending, start, isNotMounted] = get(observableResultAtom);\n        if (\"next\" in observable) {\n            if (isNotMounted()) {\n                set(resultAtom, makePending());\n                start();\n            }\n            observable.next(data);\n        } else {\n            throw new Error(\"observable is not subject\");\n        }\n    });\n    return observableAtom;\n}\nconst cache1$1 = /* @__PURE__ */ new WeakMap();\nconst memo1 = (create, dep1)=>(cache1$1.has(dep1) ? cache1$1 : cache1$1.set(dep1, create())).get(dep1);\nconst LOADING = {\n    state: \"loading\"\n};\nfunction loadable(anAtom) {\n    return memo1(()=>{\n        const loadableCache = /* @__PURE__ */ new WeakMap();\n        const refreshAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\n        if (( false ? 0 : void 0) !== \"production\") {\n            refreshAtom.debugPrivate = true;\n        }\n        const derivedAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, { setSelf })=>{\n            get(refreshAtom);\n            let value;\n            try {\n                value = get(anAtom);\n            } catch (error) {\n                return {\n                    state: \"hasError\",\n                    error\n                };\n            }\n            if (!(value instanceof Promise)) {\n                return {\n                    state: \"hasData\",\n                    data: value\n                };\n            }\n            const promise = value;\n            const cached = loadableCache.get(promise);\n            if (cached) {\n                return cached;\n            }\n            loadableCache.set(promise, LOADING);\n            promise.then((data)=>{\n                loadableCache.set(promise, {\n                    state: \"hasData\",\n                    data\n                });\n            }, (error)=>{\n                loadableCache.set(promise, {\n                    state: \"hasError\",\n                    error\n                });\n            }).finally(setSelf);\n            return LOADING;\n        }, (_get, set)=>{\n            set(refreshAtom, (c)=>c + 1);\n        });\n        if (( false ? 0 : void 0) !== \"production\") {\n            derivedAtom.debugPrivate = true;\n        }\n        return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(derivedAtom));\n    }, anAtom);\n}\nconst getCached = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1 = /* @__PURE__ */ new WeakMap();\nconst memo2 = (create, dep1, dep2)=>{\n    const cache2 = getCached(()=>/* @__PURE__ */ new WeakMap(), cache1, dep1);\n    return getCached(create, cache2, dep2);\n};\nconst defaultFallback = ()=>void 0;\nfunction unwrap(anAtom, fallback = defaultFallback) {\n    return memo2(()=>{\n        const promiseErrorCache = /* @__PURE__ */ new WeakMap();\n        const promiseResultCache = /* @__PURE__ */ new WeakMap();\n        const refreshAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\n        if (( false ? 0 : void 0) !== \"production\") {\n            refreshAtom.debugPrivate = true;\n        }\n        const promiseAndValueAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, { setSelf })=>{\n            get(refreshAtom);\n            const prev = get(promiseAndValueAtom);\n            const promise = get(anAtom);\n            if (!(promise instanceof Promise)) {\n                return {\n                    v: promise\n                };\n            }\n            if (promise === (prev == null ? void 0 : prev.p)) {\n                if (promiseErrorCache.has(promise)) {\n                    throw promiseErrorCache.get(promise);\n                }\n                if (promiseResultCache.has(promise)) {\n                    return {\n                        p: promise,\n                        v: promiseResultCache.get(promise)\n                    };\n                }\n            }\n            if (promise !== (prev == null ? void 0 : prev.p)) {\n                promise.then((v)=>promiseResultCache.set(promise, v), (e)=>promiseErrorCache.set(promise, e)).finally(setSelf);\n            }\n            if (prev && \"v\" in prev) {\n                return {\n                    p: promise,\n                    f: fallback(prev.v),\n                    v: prev.v\n                };\n            }\n            return {\n                p: promise,\n                f: fallback()\n            };\n        }, (_get, set)=>{\n            set(refreshAtom, (c)=>c + 1);\n        });\n        promiseAndValueAtom.init = void 0;\n        if (( false ? 0 : void 0) !== \"production\") {\n            promiseAndValueAtom.debugPrivate = true;\n        }\n        return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const state = get(promiseAndValueAtom);\n            if (\"f\" in state) {\n                return state.f;\n            }\n            return state.v;\n        }, (_get, set, ...args)=>set(anAtom, ...args));\n    }, anAtom, fallback);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/jotai@2.6.1_@types+react@18.2.47_react@18.2.0/node_modules/jotai/esm/vanilla/utils.mjs\n");

/***/ })

};
;